package org.opencms.ocee.vfsdoctor;

import java.io.IOException;
import java.net.URL;
import org.apache.commons.digester3.Digester;
import org.apache.commons.logging.Log;
import org.opencms.configuration.I_CmsXmlConfiguration;
import org.opencms.file.CmsObject;
import org.opencms.main.CmsCoreProvider;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.ocee.base.CmsOceeManager;
import org.opencms.ocee.vfsdoctor.plugins.CmsVfsDoctorPluginConfiguration;
import org.opencms.util.CmsFileUtil;
import org.opencms.xml.CmsXmlEntityResolver;
import org.opencms.xml.CmsXmlErrorHandler;
import org.xml.sax.SAXException;

public final class CmsVfsDoctorManager {
   private static final Log Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = CmsLog.getLog(CmsVfsDoctorManager.class);
   private boolean o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = false;
   private String Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   private CmsVfsDoctorPluginManager Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = new CmsVfsDoctorPluginManager();
   private String Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void = "default";
   private CmsVfsDoctorRfsBrowser Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = new CmsVfsDoctorRfsBrowser();
   private CmsVfsDoctorSqlConsole Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = new CmsVfsDoctorSqlConsole();

   public static CmsVfsDoctorManager getInstance() {
      try {
         return (CmsVfsDoctorManager)CmsOceeManager.getInstance().getClassLoader().loadObject(CmsVfsDoctorManager.class.getName());
      } catch (Exception var1) {
         return null;
      }
   }

   public String getModuleLocation() {
      if (this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class == null) {
         String filename = this.getClass().getName().replace('.', '/');
         int pos = filename.lastIndexOf(47) + 1;
         this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = pos > 0 ? filename.substring(0, pos) : "";
      }

      return this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   }

   public String getModuleName() {
      return this.getModuleLocation().replace('/', '.');
   }

   public CmsVfsDoctorPluginManager getPluginManager() {
      return this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   }

   public String getPoolName() {
      return this.Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void;
   }

   public String getPoolUrl() {
      return CmsCoreProvider.getInstance().getPoolUrl(this.getPoolName());
   }

   public CmsVfsDoctorRfsBrowser getRfsBrowser() {
      return this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;
   }

   public CmsVfsDoctorSqlConsole getSqlConsole() {
      return this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;
   }

   public void initialize() throws CmsException {
      if (this.getPoolName() != null) {
         this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.configPlugins();
         this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String.configure();
         this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = true;
      }

   }

   public boolean isInitialized() {
      return this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   }

   public void loadXmlConfiguration(CmsVfsDoctorPluginConfiguration configuration) throws CmsException {
      String thisFilename = this.getClass().getName().replace('.', '/');
      URL thisUrl = this.getClass().getClassLoader().getResource(thisFilename + ".class");

      try {
         URL baseUrl = new URL(thisUrl, ".");
         this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(baseUrl, configuration);
      } catch (IOException var9) {
         String configFilename = configuration.getPlugin().getClass().getName().replace('.', '/');
         URL configUrl = this.getClass().getClassLoader().getResource(configFilename + ".class");

         try {
            URL baseUrl = new URL(configUrl, ".");
            this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(baseUrl, configuration);
         } catch (Exception var8) {
            throw new CmsException(Messages.get().container("ERR_CONFIG_MODULE_0"), var8);
         }
      } catch (SAXException var10) {
         throw new CmsException(Messages.get().container("ERR_CONFIG_PARSE_0"), var10);
      }

   }

   public void setPoolName(String poolName) {
      this.Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void = poolName;
   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(I_CmsXmlConfiguration configuration) {
      if (configuration.getDtdSystemLocation() != null) {
         try {
            String file = CmsFileUtil.readFile(configuration.getDtdSystemLocation() + configuration.getDtdFilename(), "UTF-8");
            CmsXmlEntityResolver.cacheSystemId(configuration.getDtdUrlPrefix() + configuration.getDtdFilename(), file.getBytes("UTF-8"));
            if (Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.isDebugEnabled()) {
               Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.debug(org.opencms.configuration.Messages.get().getBundle().key("LOG_CACHE_DTD_SYSTEM_ID_1", new Object[]{configuration.getDtdUrlPrefix() + configuration.getDtdFilename() + " --> " + configuration.getDtdSystemLocation() + configuration.getDtdFilename()}));
            }
         } catch (IOException var3) {
            Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.error(org.opencms.configuration.Messages.get().getBundle().key("LOG_CACHE_DTD_SYSTEM_ID_FAILURE_1", new Object[]{configuration.getDtdSystemLocation() + configuration.getDtdFilename()}), var3);
         }
      }

   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(URL url, I_CmsXmlConfiguration configuration) throws IOException, SAXException {
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(configuration);
      URL fileUrl = new URL(url, configuration.getXmlFileName());
      if (Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.isDebugEnabled()) {
         Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.debug(org.opencms.configuration.Messages.get().getBundle().key("LOG_LOAD_CONFIG_XMLFILE_1", new Object[]{fileUrl}));
      }

      Digester digester = new Digester();
      digester.setValidating(true);
      digester.setEntityResolver(new CmsXmlEntityResolver((CmsObject)null));
      digester.setRuleNamespaceURI((String)null);
      digester.setErrorHandler(new CmsXmlErrorHandler());
      digester.push(configuration);
      configuration.addXmlDigesterRules(digester);
      digester.parse(fileUrl.openStream());
   }
}
