package org.opencms.ocee.vfsdoctor;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.StringTokenizer;
import org.apache.commons.logging.Log;
import org.opencms.main.CmsLog;

public class CmsVfsDoctorPreparedStatement implements PreparedStatement {
   private static final Log LOG = CmsLog.getLog(CmsVfsDoctorPreparedStatement.class);
   private Object[] params;
   private PreparedStatement preparedStatement;
   private String sql;

   public CmsVfsDoctorPreparedStatement(PreparedStatement ps) {
      this.preparedStatement = ps;
   }

   public void addBatch() throws SQLException {
      this.preparedStatement.addBatch();
   }

   public void addBatch(String sql) throws SQLException {
      this.preparedStatement.addBatch(sql);
   }

   public void cancel() throws SQLException {
      this.preparedStatement.cancel();
   }

   public void clearBatch() throws SQLException {
      this.preparedStatement.clearBatch();
   }

   public void clearParameters() throws SQLException {
      this.preparedStatement.clearParameters();
   }

   public void clearWarnings() throws SQLException {
      this.preparedStatement.clearWarnings();
   }

   public void close() throws SQLException {
      this.preparedStatement.close();
   }

   public boolean equals(Object obj) {
      return this.preparedStatement.equals(obj);
   }

   public boolean execute() throws SQLException {
      return this.preparedStatement.execute();
   }

   public boolean execute(String sql) throws SQLException {
      return this.preparedStatement.execute(sql);
   }

   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
      return this.preparedStatement.execute(sql, autoGeneratedKeys);
   }

   public boolean execute(String sql, int[] columnIndexes) throws SQLException {
      return this.preparedStatement.execute(sql, columnIndexes);
   }

   public boolean execute(String sql, String[] columnNames) throws SQLException {
      return this.preparedStatement.execute(sql, columnNames);
   }

   public int[] executeBatch() throws SQLException {
      return this.preparedStatement.executeBatch();
   }

   public ResultSet executeQuery() throws SQLException {
      if (LOG.isInfoEnabled() && !this.sql.toUpperCase().startsWith("SELECT")) {
         LOG.info(this.toString());
      }

      return this.preparedStatement.executeQuery();
   }

   public ResultSet executeQuery(String sql) throws SQLException {
      return this.preparedStatement.executeQuery(sql);
   }

   public int executeUpdate() throws SQLException {
      if (LOG.isInfoEnabled() && !this.sql.toUpperCase().startsWith("SELECT")) {
         LOG.info(this.toString());
      }

      return this.preparedStatement.executeUpdate();
   }

   public int executeUpdate(String sql) throws SQLException {
      return this.preparedStatement.executeUpdate(sql);
   }

   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
      return this.preparedStatement.executeUpdate(sql, autoGeneratedKeys);
   }

   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
      return this.preparedStatement.executeUpdate(sql, columnIndexes);
   }

   public int executeUpdate(String sql, String[] columnNames) throws SQLException {
      return this.preparedStatement.executeUpdate(sql, columnNames);
   }

   public Connection getConnection() throws SQLException {
      return this.preparedStatement.getConnection();
   }

   public int getFetchDirection() throws SQLException {
      return this.preparedStatement.getFetchDirection();
   }

   public int getFetchSize() throws SQLException {
      return this.preparedStatement.getFetchSize();
   }

   public ResultSet getGeneratedKeys() throws SQLException {
      return this.preparedStatement.getGeneratedKeys();
   }

   public int getMaxFieldSize() throws SQLException {
      return this.preparedStatement.getMaxFieldSize();
   }

   public int getMaxRows() throws SQLException {
      return this.preparedStatement.getMaxRows();
   }

   public ResultSetMetaData getMetaData() throws SQLException {
      return this.preparedStatement.getMetaData();
   }

   public boolean getMoreResults() throws SQLException {
      return this.preparedStatement.getMoreResults();
   }

   public boolean getMoreResults(int current) throws SQLException {
      return this.preparedStatement.getMoreResults(current);
   }

   public ParameterMetaData getParameterMetaData() throws SQLException {
      return this.preparedStatement.getParameterMetaData();
   }

   public int getQueryTimeout() throws SQLException {
      return this.preparedStatement.getQueryTimeout();
   }

   public ResultSet getResultSet() throws SQLException {
      return this.preparedStatement.getResultSet();
   }

   public int getResultSetConcurrency() throws SQLException {
      return this.preparedStatement.getResultSetConcurrency();
   }

   public int getResultSetHoldability() throws SQLException {
      return this.preparedStatement.getResultSetHoldability();
   }

   public int getResultSetType() throws SQLException {
      return this.preparedStatement.getResultSetType();
   }

   public String getSql() {
      return this.sql;
   }

   public int getUpdateCount() throws SQLException {
      return this.preparedStatement.getUpdateCount();
   }

   public SQLWarning getWarnings() throws SQLException {
      return this.preparedStatement.getWarnings();
   }

   public int hashCode() {
      return this.preparedStatement.hashCode();
   }

   public boolean isClosed() throws SQLException {
      return this.preparedStatement.isClosed();
   }

   public boolean isPoolable() throws SQLException {
      return this.preparedStatement.isPoolable();
   }

   public boolean isWrapperFor(Class arg0) throws SQLException {
      return this.preparedStatement.isWrapperFor(arg0);
   }

   public void setArray(int i, Array x) throws SQLException {
      this.params[i - 1] = x;
      this.preparedStatement.setArray(i, x);
   }

   public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
      this.preparedStatement.setAsciiStream(parameterIndex, x);
   }

   public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setAsciiStream(parameterIndex, x, length);
   }

   public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
      this.preparedStatement.setAsciiStream(parameterIndex, x, length);
   }

   public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setBigDecimal(parameterIndex, x);
   }

   public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
      this.preparedStatement.setBinaryStream(parameterIndex, x);
   }

   public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setBinaryStream(parameterIndex, x, length);
   }

   public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
      this.preparedStatement.setBinaryStream(parameterIndex, x, length);
   }

   public void setBlob(int i, Blob x) throws SQLException {
      this.params[i - 1] = x;
      this.preparedStatement.setBlob(i, x);
   }

   public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
      this.preparedStatement.setBlob(parameterIndex, inputStream);
   }

   public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
      this.preparedStatement.setBlob(parameterIndex, inputStream, length);
   }

   public void setBoolean(int parameterIndex, boolean x) throws SQLException {
      this.params[parameterIndex - 1] = new Boolean(x);
      this.preparedStatement.setBoolean(parameterIndex, x);
   }

   public void setByte(int parameterIndex, byte x) throws SQLException {
      this.params[parameterIndex - 1] = new Byte(x);
      this.preparedStatement.setByte(parameterIndex, x);
   }

   public void setBytes(int parameterIndex, byte[] x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setBytes(parameterIndex, x);
   }

   public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
      this.preparedStatement.setCharacterStream(parameterIndex, reader);
   }

   public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
      this.params[parameterIndex - 1] = reader;
      this.preparedStatement.setCharacterStream(parameterIndex, reader, length);
   }

   public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
      this.preparedStatement.setCharacterStream(parameterIndex, reader, length);
   }

   public void setClob(int i, Clob x) throws SQLException {
      this.params[i - 1] = x;
      this.preparedStatement.setClob(i, x);
   }

   public void setClob(int parameterIndex, Reader reader) throws SQLException {
      this.preparedStatement.setClob(parameterIndex, reader);
   }

   public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
      this.preparedStatement.setClob(parameterIndex, reader, length);
   }

   public void setCursorName(String name) throws SQLException {
      this.preparedStatement.setCursorName(name);
   }

   public void setDate(int parameterIndex, Date x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setDate(parameterIndex, x);
   }

   public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setDate(parameterIndex, x, cal);
   }

   public void setDouble(int parameterIndex, double x) throws SQLException {
      this.params[parameterIndex - 1] = new Double(x);
      this.preparedStatement.setDouble(parameterIndex, x);
   }

   public void setEscapeProcessing(boolean enable) throws SQLException {
      this.preparedStatement.setEscapeProcessing(enable);
   }

   public void setFetchDirection(int direction) throws SQLException {
      this.preparedStatement.setFetchDirection(direction);
   }

   public void setFetchSize(int rows) throws SQLException {
      this.preparedStatement.setFetchSize(rows);
   }

   public void setFloat(int parameterIndex, float x) throws SQLException {
      this.params[parameterIndex - 1] = new Float(x);
      this.preparedStatement.setFloat(parameterIndex, x);
   }

   public void setInt(int parameterIndex, int x) throws SQLException {
      this.params[parameterIndex - 1] = new Integer(x);
      this.preparedStatement.setInt(parameterIndex, x);
   }

   public void setLong(int parameterIndex, long x) throws SQLException {
      this.params[parameterIndex - 1] = new Long(x);
      this.preparedStatement.setLong(parameterIndex, x);
   }

   public void setMaxFieldSize(int max) throws SQLException {
      this.preparedStatement.setMaxFieldSize(max);
   }

   public void setMaxRows(int max) throws SQLException {
      this.preparedStatement.setMaxRows(max);
   }

   public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
      this.preparedStatement.setNCharacterStream(parameterIndex, value);
   }

   public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
      this.preparedStatement.setNCharacterStream(parameterIndex, value, length);
   }

   public void setNClob(int parameterIndex, NClob value) throws SQLException {
      this.preparedStatement.setNClob(parameterIndex, value);
   }

   public void setNClob(int parameterIndex, Reader reader) throws SQLException {
      this.preparedStatement.setNClob(parameterIndex, reader);
   }

   public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
      this.preparedStatement.setNClob(parameterIndex, reader, length);
   }

   public void setNString(int parameterIndex, String value) throws SQLException {
      this.preparedStatement.setNString(parameterIndex, value);
   }

   public void setNull(int parameterIndex, int sqlType) throws SQLException {
      this.params[parameterIndex - 1] = "NULL";
      this.preparedStatement.setNull(parameterIndex, sqlType);
   }

   public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
      this.params[paramIndex - 1] = "NULL";
      this.preparedStatement.setNull(paramIndex, sqlType, typeName);
   }

   public void setObject(int parameterIndex, Object x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setObject(parameterIndex, x);
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setObject(parameterIndex, x, targetSqlType);
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setObject(parameterIndex, x, targetSqlType, scale);
   }

   public void setPoolable(boolean poolable) throws SQLException {
      this.preparedStatement.setPoolable(poolable);
   }

   public void setQueryTimeout(int seconds) throws SQLException {
      this.preparedStatement.setQueryTimeout(seconds);
   }

   public void setRef(int i, Ref x) throws SQLException {
      this.params[i - 1] = x;
      this.preparedStatement.setRef(i, x);
   }

   public void setRowId(int parameterIndex, RowId x) throws SQLException {
      this.preparedStatement.setRowId(parameterIndex, x);
   }

   public void setShort(int parameterIndex, short x) throws SQLException {
      this.params[parameterIndex - 1] = new Short(x);
      this.preparedStatement.setShort(parameterIndex, x);
   }

   public void setSql(String sql) {
      boolean isString = false;
      char[] sqlString = sql.toCharArray();

      int i;
      for(i = 0; i < sqlString.length; ++i) {
         if (sqlString[i] == '\'') {
            isString = !isString;
         }

         if (sqlString[i] == '?' && isString) {
            sqlString[i] = 7;
         }
      }

      this.sql = new String(sqlString);
      i = 0;

      for(int index = -1; (index = this.sql.indexOf("?", index + 1)) != -1; ++i) {
      }

      this.params = new Object[i];
   }

   public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
      this.preparedStatement.setSQLXML(parameterIndex, xmlObject);
   }

   public void setString(int parameterIndex, String x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setString(parameterIndex, x);
   }

   public void setTime(int parameterIndex, Time x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setTime(parameterIndex, x);
   }

   public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setTime(parameterIndex, x, cal);
   }

   public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setTimestamp(parameterIndex, x);
   }

   public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setTimestamp(parameterIndex, x, cal);
   }

   /** @deprecated */
   public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setUnicodeStream(parameterIndex, x, length);
   }

   public void setURL(int parameterIndex, URL x) throws SQLException {
      this.params[parameterIndex - 1] = x;
      this.preparedStatement.setURL(parameterIndex, x);
   }

   public String toString() {
      StringTokenizer st = new StringTokenizer(this.sql, "?");
      int count = 1;

      StringBuffer statement;
      for(statement = new StringBuffer(); st.hasMoreTokens(); ++count) {
         statement.append(st.nextToken());
         if (count <= this.params.length) {
            statement.append(this.params[count - 1]);
         }
      }

      char[] unfilterSql = statement.toString().toCharArray();

      for(int i = 0; i < unfilterSql.length; ++i) {
         if (unfilterSql[i] == 7) {
            unfilterSql[i] = '?';
         }
      }

      return new String(unfilterSql);
   }

   public Object unwrap(Class arg0) throws SQLException {
      return this.preparedStatement.unwrap(arg0);
   }

	@Override
	public void closeOnCompletion() throws SQLException {
		this.preparedStatement.closeOnCompletion();
		
	}
	
	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return this.preparedStatement.isCloseOnCompletion();
	}
}
