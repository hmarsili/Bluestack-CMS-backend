package org.opencms.ocee.vfsdoctor;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.jsp.PageContext;
import org.opencms.jsp.CmsJspActionElement;
import org.opencms.main.CmsCoreProvider;
import org.opencms.main.OpenCms;
import org.opencms.ocee.vfsdoctor.plugins.CmsVfsDoctorPluginConfiguration;
import org.opencms.widgets.CmsCheckboxWidget;
import org.opencms.widgets.CmsInputWidget;
import org.opencms.widgets.CmsSelectWidget;
import org.opencms.widgets.CmsSelectWidgetOption;
import org.opencms.workplace.CmsWidgetDialog;
import org.opencms.workplace.CmsWidgetDialogParameter;

public class CmsVfsDoctorSettingsDialog extends CmsWidgetDialog {
   public static final String KEY_PREFIX = "settings";
   public static final String[] PAGES = new String[]{"page1"};
   private List Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   private List o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   private List Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   private List Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;
   private List Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   private CmsVfsDoctorManager Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;

   public CmsVfsDoctorSettingsDialog(CmsJspActionElement jsp) {
      super(jsp);
   }

   public CmsVfsDoctorSettingsDialog(PageContext context, HttpServletRequest req, HttpServletResponse res) {
      this(new CmsJspActionElement(context, req, res));
   }

   public void actionCommit() {
      ArrayList errors = new ArrayList();

      try {
         Iterator itPlugins = this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.iterator();

         while(itPlugins.hasNext()) {
            I_CmsVfsDoctorPlugin plugin = (I_CmsVfsDoctorPlugin)Class.forName(itPlugins.next().toString()).newInstance();
            CmsVfsDoctorManager.getInstance().loadXmlConfiguration(new CmsVfsDoctorPluginConfiguration(plugin));
         }

         this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getPluginManager().o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super();
         itPlugins = this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.iterator();

         while(itPlugins.hasNext()) {
            this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getPluginManager().registerPlugin(itPlugins.next().toString());
         }

         this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getSqlConsole().o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super();
         Iterator itAllowed = this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class.iterator();

         while(itAllowed.hasNext()) {
            this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getSqlConsole().registerAllowedSentence(itAllowed.next().toString());
         }

         Iterator itDisallowed = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.iterator();

         while(itDisallowed.hasNext()) {
            this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getSqlConsole().registerDisallowedSentence(itDisallowed.next().toString());
         }

         this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser().o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super();
         Iterator itPaths = this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String.iterator();

         while(itPaths.hasNext()) {
            this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser().registerPath(itPaths.next().toString());
         }

         Iterator itDrives = this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.iterator();

         while(itDrives.hasNext()) {
            this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser().registerDrive(itDrives.next().toString());
         }

         this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.initialize();
         OpenCms.writeConfiguration(CmsVfsDoctorConfiguration.class);
      } catch (Throwable var7) {
         errors.add(var7);
      }

      this.setCommitErrors(errors);
   }

   public List getAllowedSentences() {
      return this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   }

   public List getDisallowedSentences() {
      return this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   }

   public List getDrives() {
      return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   }

   public List getPaths() {
      return this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;
   }

   public List getPlugins() {
      return this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   }

   public void setAllowedSentences(List allowedSentences) {
      this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = allowedSentences;
   }

   public void setDisallowedSentences(List disallowedSentences) {
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = disallowedSentences;
   }

   public void setDrives(List drives) {
      this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = drives;
   }

   public void setPaths(List paths) {
      this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = paths;
   }

   public void setPlugins(List plugins) {
      this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = plugins;
   }

   protected String createDialogHtml(String dialog) {
      StringBuffer result = new StringBuffer(1024);
      result.append(this.createWidgetTableStart());
      result.append(this.createWidgetErrorHeader());
      if (dialog.equals(PAGES[0])) {
         result.append(this.dialogBlockStart(this.key("GUI_SETTINGS_EDITOR_LABEL_GENERAL_BLOCK_0")));
         result.append(this.createWidgetTableStart());
         result.append(this.createDialogRowsHtml(0, 0));
         result.append(this.createWidgetTableEnd());
         result.append(this.dialogBlockEnd());
         result.append(this.dialogBlockStart(this.key("GUI_SETTINGS_EDITOR_LABEL_PLUGIN_BLOCK_0")));
         result.append(this.createWidgetTableStart());
         result.append(this.createDialogRowsHtml(1, 1));
         result.append(this.createWidgetTableEnd());
         result.append(this.dialogBlockEnd());
         result.append(this.dialogBlockStart(this.key("GUI_SETTINGS_EDITOR_LABEL_SQL_BLOCK_0")));
         result.append(this.createWidgetTableStart());
         result.append(this.createDialogRowsHtml(2, 3));
         result.append(this.createWidgetTableEnd());
         result.append(this.dialogBlockEnd());
         result.append(this.dialogBlockStart(this.key("GUI_SETTINGS_EDITOR_LABEL_RFS_BLOCK_0")));
         result.append(this.createWidgetTableStart());
         result.append(this.createDialogRowsHtml(4, 12));
         result.append(this.createWidgetTableEnd());
         result.append(this.dialogBlockEnd());
      }

      result.append(this.createWidgetTableEnd());
      return result.toString();
   }

   protected void defineWidgets() {
      this.initSettingsObject();
      this.setKeyPrefix("settings");
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return, "poolName", PAGES[0], new CmsSelectWidget(this.getSelectionList(CmsCoreProvider.getInstance().getAvailableDbPoolNames(), this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getPoolName()))));
      this.addWidget(new CmsWidgetDialogParameter(this, "plugins", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this, "allowedSentences", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this, "disallowedSentences", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "initialDir", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "readOnly", PAGES[0], new CmsCheckboxWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "restrictWhitelist", PAGES[0], new CmsCheckboxWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this, "paths", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "cmdEnabled", PAGES[0], new CmsCheckboxWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "maxTime", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "command", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser(), "exeParam", PAGES[0], new CmsInputWidget()));
      this.addWidget(new CmsWidgetDialogParameter(this, "drives", PAGES[0], new CmsInputWidget()));
   }

   protected String[] getPageArray() {
      return PAGES;
   }

   protected List getSelectionList(List itemList, String defaultItem) {
      ArrayList retVal = new ArrayList();

      try {
         Iterator itItems = itemList.iterator();

         while(itItems.hasNext()) {
            String item = (String)itItems.next();
            retVal.add(new CmsSelectWidgetOption(item, item.equals(defaultItem)));
         }
      } catch (Exception var6) {
      }

      return retVal;
   }

   protected void initMessages() {
      this.addMessages(Messages.get().getBundleName());
      super.initMessages();
   }

   protected void initSettingsObject() {
      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = CmsVfsDoctorManager.getInstance();
      this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = new ArrayList();
      Iterator it = this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getPluginManager().getPlugins().iterator();

      while(it.hasNext()) {
         I_CmsVfsDoctorPlugin plugin = (I_CmsVfsDoctorPlugin)it.next();
         this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.add(plugin.getClass().getName());
      }

      this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = new ArrayList(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getSqlConsole().getAllowedSentences());
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = new ArrayList(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getSqlConsole().getDisallowedSentences());
      this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = new ArrayList(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser().getRestrictedPaths());
      this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = new ArrayList(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.getRfsBrowser().getForbiddenDrives());
   }
}
