package org.opencms.ocee.vfsdoctor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.logging.Log;
import org.opencms.db.CmsDbContext;
import org.opencms.db.generic.CmsSqlManager;
import org.opencms.file.CmsRequestContext;
import org.opencms.i18n.CmsMessageContainer;
import org.opencms.main.CmsCoreProvider;
import org.opencms.main.CmsLog;
import org.opencms.report.I_CmsReport;
import org.opencms.security.CmsSecurityException;

public final class CmsVfsDoctorSqlConsole {
   private static final Log Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = CmsLog.getLog(CmsVfsDoctorSqlConsole.class);
   private final List Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = new ArrayList();
   private final List o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = new ArrayList();
   private CmsSqlManager Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;

   public void configure() {
      this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = new CmsSqlManager();
      this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String.init(3, CmsVfsDoctorManager.getInstance().getPoolUrl());
   }

   public List execute(String sql, I_CmsReport report) {
      boolean var14 = false;

      List var8;
      label174: {
         CmsMessageContainer message;
         label175: {
            try {
               var14 = true;
               message = Messages.get().container("RPT_SQL_CONSOLE_BEGIN_0");
               report.println(message, 2);
               if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
                  Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message.key());
               }

               List sentences = this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String(sql);
               if (sentences.size() < 1) {
                  this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(report, Messages.get().getBundle(report.getLocale()).key("ERR_NOTHING_TO_EXECUTE_0"));
                  var14 = false;
               } else {
                  Iterator it = sentences.iterator();

                  while(true) {
                     while(it.hasNext()) {
                        String sentence = (String)it.next();
                        if (this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object(sentence)) {
                           if (sentence.toUpperCase().startsWith("SELECT") || sentence.toUpperCase().startsWith("SHOW")) {
                              List res = this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new(sentence);
                              message = Messages.get().container("RPT_NUM_ROWS_RETRIEVED_1", new Integer(res.size() - 1));
                              report.println(message);
                              if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
                                 Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message);
                              }

                              var8 = res;
                              var14 = false;
                              break label174;
                           }

                           int res = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(sentence);
                           message = Messages.get().container("RPT_NUM_ROWS_AFFECTED_1", new Integer(res));
                           report.println(message);
                           if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
                              Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message);
                           }
                        } else {
                           this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(report, (Throwable)(new CmsSecurityException(Messages.get().container("ERR_NO_PERMISSIONS_EXEC_SENTENCE_1", sentence))));
                        }
                     }

                     var14 = false;
                     break;
                  }
               }
            } catch (Throwable var15) {
               this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(report, var15);
               var14 = false;
               break label175;
            } finally {
               if (var14) {
                  message = Messages.get().container("RPT_SQL_CONSOLE_END_0");
                  report.println(message, 2);
                  if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
                     Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message.key());
                  }

               }
            }

            message = Messages.get().container("RPT_SQL_CONSOLE_END_0");
            report.println(message, 2);
            if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
               Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message.key());
            }

            return null;
         }

         message = Messages.get().container("RPT_SQL_CONSOLE_END_0");
         report.println(message, 2);
         if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
            Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message.key());
         }

         return null;
      }

      CmsMessageContainer message = Messages.get().container("RPT_SQL_CONSOLE_END_0");
      report.println(message, 2);
      if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
         Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info(message.key());
      }

      return var8;
   }

   public List getAllowedSentences() {
      return Collections.unmodifiableList(this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object);
   }

   public List getDisallowedSentences() {
      return Collections.unmodifiableList(this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super);
   }

   public void registerAllowedSentence(String sentence) {
      if (!this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.contains(sentence.toUpperCase())) {
         this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.add(sentence.toUpperCase());
      }

   }

   public void registerDisallowedSentence(String sentence) {
      if (!this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.contains(sentence.toUpperCase())) {
         this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.add(sentence.toUpperCase());
      }

   }

   private boolean Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object(String sentence) {
      Iterator it = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.iterator();

      String allowed;
      do {
         if (!it.hasNext()) {
            it = this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.iterator();

            do {
               if (!it.hasNext()) {
                  return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.isEmpty();
               }

               allowed = (String)it.next();
            } while(!sentence.toUpperCase().startsWith(allowed));

            return true;
         }

         allowed = (String)it.next();
      } while(!sentence.toUpperCase().startsWith(allowed));

      return false;
   }

   private List Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new(String sentence) throws SQLException {
      Connection conn = null;
      PreparedStatement stmt = null;
      ResultSet res = null;
      List ret = new ArrayList();
      CmsDbContext dbContext = null;
      CmsSqlManager sqlManager = this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;

      try {
         dbContext = CmsCoreProvider.getInstance().getNewDbContext((CmsRequestContext)null);
         conn = sqlManager.getConnection(dbContext);
         stmt = sqlManager.getPreparedStatementForSql(conn, sentence);
         res = stmt.executeQuery();
         ResultSetMetaData metadata = res.getMetaData();
         List heading = new ArrayList();

         for(int i = 0; i < metadata.getColumnCount(); ++i) {
            heading.add(metadata.getColumnName(i + 1));
         }

         ret.add(heading);

         while(res.next()) {
            List row = new ArrayList();

            for(int i = 0; i < metadata.getColumnCount(); ++i) {
               Object value = res.getObject(i + 1);
               if (value == null) {
                  row.add("null");
               } else {
                  row.add(value);
               }
            }

            ret.add(row);
         }
      } finally {
         sqlManager.closeAll(dbContext, conn, stmt, res);
         if (dbContext != null) {
            dbContext.clear();
         }

      }

      return ret;
   }

   private int o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(String sentence) throws SQLException {
      Connection conn = null;
      PreparedStatement stmt = null;
      CmsDbContext dbContext = null;
      CmsSqlManager sqlManager = this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;

      int ret;
      try {
         dbContext = CmsCoreProvider.getInstance().getNewDbContext((CmsRequestContext)null);
         conn = sqlManager.getConnection(dbContext);
         stmt = sqlManager.getPreparedStatementForSql(conn, sentence);
         ret = stmt.executeUpdate();
      } finally {
         sqlManager.closeAll(dbContext, conn, stmt, (ResultSet)null);
         if (dbContext != null) {
            dbContext.clear();
         }

      }

      return ret;
   }

   private List Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String(String sql) {
      String normSql = sql.replaceAll(";", "; ");
      normSql = normSql.replaceAll("\\s+", " ");
      return Arrays.asList(normSql.split("; "));
   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(I_CmsReport report, String string) {
      report.println(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", string.replaceAll("'", "\\\\'")));
      if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isInfoEnabled()) {
         Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.info("SQLConsole:" + string);
      }

   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(I_CmsReport report, Throwable e) {
      report.println(e);
      if (Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.isWarnEnabled()) {
         Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.warn("SQLConsole", e);
      }

   }

   void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super() {
      this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.clear();
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.clear();
   }
}
