/*
 * Decompiled with CFR 0_123.
 * 
 * Could not load the following classes:
 *  org.apache.commons.collections.ExtendedProperties
 *  org.apache.commons.logging.Log
 *  org.opencms.configuration.CmsConfigurationManager
 *  org.opencms.db.CmsDbContext
 *  org.opencms.db.CmsDriverManager
 *  org.opencms.db.CmsPublishList
 *  org.opencms.db.CmsPublishedResource
 *  org.opencms.db.I_CmsDriver
 *  org.opencms.db.I_CmsProjectDriver
 *  org.opencms.db.generic.CmsSqlManager
 *  org.opencms.file.CmsDataAccessException
 *  org.opencms.file.CmsFile
 *  org.opencms.file.CmsFolder
 *  org.opencms.file.CmsGroup
 *  org.opencms.file.CmsProject
 *  org.opencms.file.CmsProject$CmsProjectType
 *  org.opencms.file.CmsResource
 *  org.opencms.file.CmsUser
 *  org.opencms.i18n.CmsMessages
 *  org.opencms.main.CmsException
 *  org.opencms.main.CmsInitException
 *  org.opencms.main.CmsLog
 *  org.opencms.main.I_CmsEventListener
 *  org.opencms.main.OpenCms
 *  org.opencms.monitor.CmsMemoryMonitor
 *  org.opencms.monitor.CmsMemoryMonitor$CacheType
 *  org.opencms.ocee.base.CmsOceeManager
 *  org.opencms.publish.CmsPublishJobInfoBean
 *  org.opencms.report.I_CmsReport
 *  org.opencms.util.CmsUUID
 */
package org.opencms.ocee.cache;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections.ExtendedProperties;
import org.apache.commons.logging.Log;
import org.opencms.configuration.CmsConfigurationManager;
import org.opencms.db.CmsDbContext;
import org.opencms.db.CmsDriverManager;
import org.opencms.db.CmsPublishList;
import org.opencms.db.CmsPublishedResource;
import org.opencms.db.I_CmsDriver;
import org.opencms.db.I_CmsProjectDriver;
import org.opencms.db.generic.CmsSqlManager;
import org.opencms.file.CmsDataAccessException;
import org.opencms.file.CmsFile;
import org.opencms.file.CmsFolder;
import org.opencms.file.CmsGroup;
import org.opencms.file.CmsProject;
import org.opencms.file.CmsResource;
import org.opencms.file.CmsUser;
import org.opencms.i18n.CmsMessages;
import org.opencms.main.CmsException;
import org.opencms.main.CmsInitException;
import org.opencms.main.CmsLog;
import org.opencms.main.I_CmsEventListener;
import org.opencms.main.OpenCms;
import org.opencms.monitor.CmsMemoryMonitor;
import org.opencms.ocee.base.CmsOceeManager;
import org.opencms.ocee.cache.CmsCacheManager;
import org.opencms.ocee.cache.I_CmsCacheInstanceType;
import org.opencms.ocee.cache.Messages;
import org.opencms.ocee.cache.project.CmsProjectCacheEventHandler;
import org.opencms.ocee.cache.project.CmsProjectCacheInstanceType;
import org.opencms.ocee.cache.project.CmsProjectCacheKey;
import org.opencms.publish.CmsPublishJobInfoBean;
import org.opencms.report.I_CmsReport;
import org.opencms.util.CmsUUID;

public class CmsProjectCache
implements I_CmsDriver,
I_CmsProjectDriver {
    private static final Log o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = CmsLog.getLog(CmsProjectCache.class);
    protected I_CmsProjectDriver \u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;

    public CmsProject createProject(CmsDbContext dbc, CmsUUID id, CmsUser owner, CmsGroup group, CmsGroup managergroup, String name, String description, int flags, CmsProject.CmsProjectType type) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.createProject(dbc, id, owner, group, managergroup, name, description, flags, type);
    }

    public void createProjectResource(CmsDbContext dbc, CmsUUID projectId, String resourceName) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.createProjectResource(dbc, projectId, resourceName);
    }

    public void createPublishJob(CmsDbContext dbc, CmsPublishJobInfoBean publishJob) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.createPublishJob(dbc, publishJob);
    }

    public void deleteAllStaticExportPublishedResources(CmsDbContext dbc, int linkType) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deleteAllStaticExportPublishedResources(dbc, linkType);
    }

    public void deleteProject(CmsDbContext dbc, CmsProject project) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deleteProject(dbc, project);
    }

    public void deleteProjectResource(CmsDbContext dbc, CmsUUID projectId, String resourceName) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deleteProjectResource(dbc, projectId, resourceName);
    }

    public void deleteProjectResources(CmsDbContext dbc, CmsProject project) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deleteProjectResources(dbc, project);
    }

    public void deletePublishHistory(CmsDbContext dbc, CmsUUID projectId, int maxBackupTagId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deletePublishHistory(dbc, projectId, maxBackupTagId);
    }

    public void deletePublishHistoryEntry(CmsDbContext dbc, CmsUUID publishHistoryId, CmsPublishedResource publishResource) throws CmsDataAccessException {
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !dbc.getProjectId().isNullUUID()) {
            this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deletePublishHistoryEntry(dbc, publishHistoryId, publishResource);
            return;
        }
        manager.cacheRemove(CmsProjectCacheInstanceType.PUBLISHED_RESOURCES, CmsProject.ONLINE_PROJECT_ID, CmsProjectCacheKey.getCacheKeyForPublishedResources(publishHistoryId));
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deletePublishHistoryEntry(dbc, publishHistoryId, publishResource);
    }

    public void deletePublishJob(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deletePublishJob(dbc, publishHistoryId);
    }

    public void deletePublishList(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deletePublishList(dbc, publishHistoryId);
    }

    public void deleteStaticExportPublishedResource(CmsDbContext dbc, String resourceName, int linkType, String linkParameter) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.deleteStaticExportPublishedResource(dbc, resourceName, linkType, linkParameter);
    }

    public void destroy() throws Throwable {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.destroy();
        if (CmsLog.INIT.isInfoEnabled()) {
            CmsLog.INIT.info((Object)Messages.get().getBundle().key("INIT_CACHE_SHUTDOWN_OK_1", new Object[]{this.getClass().getName()}));
        }
        this.finalize();
    }

    public void fillDefaults(CmsDbContext dbc) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.fillDefaults(dbc);
    }

    public CmsSqlManager getSqlManager() {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.getSqlManager();
    }

    public void init(CmsDbContext dbc, CmsConfigurationManager configurationManager, List successiveDrivers, CmsDriverManager driverManager) throws CmsInitException {
        ExtendedProperties config;
        Map configuration = configurationManager.getConfiguration();
        if (configuration instanceof ExtendedProperties) {
            config = (ExtendedProperties)configuration;
        } else {
            config = new ExtendedProperties();
            config.putAll(configuration);
        }
        String driverName = config.getString((String)successiveDrivers.get(0) + ".project.driver");
        successiveDrivers = successiveDrivers.size() > 1 ? successiveDrivers.subList(1, successiveDrivers.size()) : null;
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = (I_CmsProjectDriver)driverManager.newDriverInstance(configurationManager, driverName, successiveDrivers);
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !manager.isInitialized()) {
            return;
        }
        if (CmsOceeManager.getInstance().checkCoreVersion("7.5.2")) {
            OpenCms.getMemoryMonitor().disableCache(new CmsMemoryMonitor.CacheType[]{CmsMemoryMonitor.CacheType.PUBLISHED_RESOURCES});
            OpenCms.getMemoryMonitor().disableCache(new CmsMemoryMonitor.CacheType[]{CmsMemoryMonitor.CacheType.PROJECT_RESOURCES});
        }
        manager.setProjectDriver(this);
        OpenCms.addCmsEventListener((I_CmsEventListener)new CmsProjectCacheEventHandler(), (int[])new int[]{5, 16, 17, 18, 2, 25, 22});
    }

    public CmsSqlManager initSqlManager(String classname) {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.initSqlManager(classname);
    }

    public void publishDeletedFolder(CmsDbContext dbc, I_CmsReport report, int m, int n, CmsProject onlineProject, CmsFolder offlineFolder, CmsUUID publishHistoryId, int backupTagId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.publishDeletedFolder(dbc, report, m, n, onlineProject, offlineFolder, publishHistoryId, backupTagId);
    }

    public void publishFile(CmsDbContext dbc, I_CmsReport report, int m, int n, CmsProject onlineProject, CmsResource offlineResource, Set publishedContentIds, CmsUUID publishHistoryId, int backupTagId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.publishFile(dbc, report, m, n, onlineProject, offlineResource, publishedContentIds, publishHistoryId, backupTagId);
    }

    public CmsFile publishFileContent(CmsDbContext dbc, CmsProject offlineProject, CmsProject onlineProject, CmsResource offlineFileHeader, Set publishedContentIds, boolean needToUpdateContent, int publishTag) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.publishFileContent(dbc, offlineProject, onlineProject, offlineFileHeader, publishedContentIds, needToUpdateContent, publishTag);
    }

    public void publishFolder(CmsDbContext dbc, I_CmsReport report, int m, int n, CmsProject onlineProject, CmsFolder currentFolder, CmsUUID publishHistoryId, int backupTagId) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.publishFolder(dbc, report, m, n, onlineProject, currentFolder, publishHistoryId, backupTagId);
    }

    public synchronized void publishProject(CmsDbContext dbc, I_CmsReport report, CmsProject onlineProject, CmsPublishList publishList, int backupTagId) throws CmsException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.publishProject(dbc, report, onlineProject, publishList, backupTagId);
    }

    public List readLocks(CmsDbContext dbc) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readLocks(dbc);
    }

    public CmsProject readProject(CmsDbContext dbc, CmsUUID id) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProject(dbc, id);
    }

    public CmsProject readProject(CmsDbContext dbc, String name) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProject(dbc, name);
    }

    public String readProjectResource(CmsDbContext dbc, CmsUUID projectId, String resourcename) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectResource(dbc, projectId, resourcename);
    }

    public List readProjectResources(CmsDbContext dbc, CmsProject project) throws CmsDataAccessException {
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !dbc.getProjectId().isNullUUID()) {
            return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectResources(dbc, project);
        }
        String cacheKey = CmsProjectCacheKey.getCacheKeyForProjectResources(project.getUuid());
        List projectResources = (List)manager.cacheLookup(CmsProjectCacheInstanceType.PROJECT_RESOURCES, CmsProject.ONLINE_PROJECT_ID, cacheKey);
        if (projectResources == null) {
            projectResources = this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectResources(dbc, project);
            manager.cacheSet(CmsProjectCacheInstanceType.PROJECT_RESOURCES, CmsProject.ONLINE_PROJECT_ID, cacheKey, projectResources);
            if (o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.isDebugEnabled()) {
                o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.debug((Object)Messages.get().getBundle().key("LOG_DEBUG_ADDED_RESOURCES_FOR_PROJECT_1", new Object[]{project.getUuid()}));
            }
        }
        return projectResources != null ? new ArrayList(projectResources) : Collections.EMPTY_LIST;
    }

    public List readProjects(CmsDbContext dbc, String ouFqn) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjects(dbc, ouFqn);
    }

    public List readProjectsForGroup(CmsDbContext dbc, CmsGroup group) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectsForGroup(dbc, group);
    }

    public List readProjectsForManagerGroup(CmsDbContext dbc, CmsGroup group) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectsForManagerGroup(dbc, group);
    }

    public List readProjectsForUser(CmsDbContext dbc, CmsUser user) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readProjectsForUser(dbc, user);
    }

    public List readPublishedResources(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !dbc.getProjectId().isNullUUID()) {
            return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishedResources(dbc, publishHistoryId);
        }
        String cacheKey = CmsProjectCacheKey.getCacheKeyForPublishedResources(publishHistoryId);
        List publishedResources = (List)manager.cacheLookup(CmsProjectCacheInstanceType.PUBLISHED_RESOURCES, CmsProject.ONLINE_PROJECT_ID, cacheKey);
        if (publishedResources == null) {
            publishedResources = this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishedResources(dbc, publishHistoryId);
            manager.cacheSet(CmsProjectCacheInstanceType.PUBLISHED_RESOURCES, CmsProject.ONLINE_PROJECT_ID, cacheKey, publishedResources);
        }
        return publishedResources;
    }

    public CmsPublishJobInfoBean readPublishJob(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishJob(dbc, publishHistoryId);
    }

    public List readPublishJobs(CmsDbContext dbc, long startTime, long endTime) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishJobs(dbc, startTime, endTime);
    }

    public CmsPublishList readPublishList(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishList(dbc, publishHistoryId);
    }

    public byte[] readPublishReportContents(CmsDbContext dbc, CmsUUID publishHistoryId) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readPublishReportContents(dbc, publishHistoryId);
    }

    public String readStaticExportPublishedResourceParameters(CmsDbContext dbc, String rfsName) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readStaticExportPublishedResourceParameters(dbc, rfsName);
    }

    public List readStaticExportResources(CmsDbContext dbc, int parameterResources, long timestamp) throws CmsDataAccessException {
        return this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.readStaticExportResources(dbc, parameterResources, timestamp);
    }

    public void unmarkProjectResources(CmsDbContext dbc, CmsProject project) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.unmarkProjectResources(dbc, project);
    }

    public void writeLocks(CmsDbContext dbc, List locks) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writeLocks(dbc, locks);
    }

    public void writeProject(CmsDbContext dbc, CmsProject project) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writeProject(dbc, project);
    }

    public void writePublishHistory(CmsDbContext dbc, CmsUUID publishId, CmsPublishedResource resource) throws CmsDataAccessException {
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !dbc.getProjectId().isNullUUID()) {
            this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writePublishHistory(dbc, publishId, resource);
            return;
        }
        manager.cacheRemove(CmsProjectCacheInstanceType.PUBLISHED_RESOURCES, CmsProject.ONLINE_PROJECT_ID, CmsProjectCacheKey.getCacheKeyForPublishedResources(publishId));
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writePublishHistory(dbc, publishId, resource);
    }

    public void writePublishJob(CmsDbContext dbc, CmsPublishJobInfoBean publishJob) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writePublishJob(dbc, publishJob);
    }

    public void writePublishReport(CmsDbContext dbc, CmsUUID publishId, byte[] content) throws CmsDataAccessException {
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writePublishReport(dbc, publishId, content);
    }

    public void writeStaticExportPublishedResource(CmsDbContext dbc, String resourceName, int linkType, String linkParameter, long timestamp) throws CmsDataAccessException {
        CmsCacheManager manager = CmsCacheManager.getInstance();
        if (manager == null || !dbc.getProjectId().isNullUUID()) {
            this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writeStaticExportPublishedResource(dbc, resourceName, linkType, linkParameter, timestamp);
            return;
        }
        String cacheKey = CmsProjectCacheKey.getCacheKeyStaticEportResourceName(resourceName);
        Object cachedObject = manager.cacheLookup(CmsProjectCacheInstanceType.STATIC_EXPORT_RESOURCE_NAME, CmsProject.ONLINE_PROJECT_ID, cacheKey);
        if (cachedObject != null) {
            return;
        }
        this.\u00d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.writeStaticExportPublishedResource(dbc, resourceName, linkType, linkParameter, timestamp);
        manager.cacheSet(CmsProjectCacheInstanceType.STATIC_EXPORT_RESOURCE_NAME, CmsProject.ONLINE_PROJECT_ID, cacheKey, cacheKey);
    }
}

