package org.opencms.ocee.db.transaction;

import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.opencms.main.CmsIllegalArgumentException;

public final class CmsTransactionInstanceType {
   public static final CmsTransactionInstanceType HISTORY_TRANSACTION = new CmsTransactionInstanceType("history", 1);
   public static final CmsTransactionInstanceType PROJECT_TRANSACTION = new CmsTransactionInstanceType("project", 2);
   public static final CmsTransactionInstanceType USER_TRANSACTION = new CmsTransactionInstanceType("user", 3);
   public static final CmsTransactionInstanceType VFS_TRANSACTION = new CmsTransactionInstanceType("vfs", 4);
   private static final CmsTransactionInstanceType[] o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   public static final List VALUES;
   private final int Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   private final String Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;

   private CmsTransactionInstanceType(String type, int order) {
      this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = type;
      this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = order;
   }

   public static CmsTransactionInstanceType valueOf(String value) {
      Iterator iter = VALUES.iterator();

      CmsTransactionInstanceType type;
      do {
         if (!iter.hasNext()) {
            throw new CmsIllegalArgumentException(Messages.get().container("ERR_TRANSACTION_TRANSACTION_TYPE_PARSE_1", new Integer(value)));
         }

         type = (CmsTransactionInstanceType)iter.next();
      } while(!value.equals(type.getType()));

      return type;
   }

   public int getOrder() {
      return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   }

   public String getType() {
      return this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   }

   public String toString() {
      return this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   }

   static {
      o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = new CmsTransactionInstanceType[]{HISTORY_TRANSACTION, PROJECT_TRANSACTION, USER_TRANSACTION, VFS_TRANSACTION};
      VALUES = Collections.unmodifiableList(Arrays.asList(o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super));
   }
}
