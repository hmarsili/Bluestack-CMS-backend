package org.opencms.ocee.replication;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.opencms.configuration.CmsConfigurationManager;
import org.opencms.db.CmsDbContext;
import org.opencms.db.CmsDriverManager;
import org.opencms.db.I_CmsDbContextFactory;
import org.opencms.db.I_CmsHistoryDriver;
import org.opencms.db.I_CmsProjectDriver;
import org.opencms.db.I_CmsUserDriver;
import org.opencms.db.I_CmsVfsDriver;
import org.opencms.db.generic.CmsHistoryDriver;
import org.opencms.db.generic.CmsProjectDriver;
import org.opencms.db.generic.CmsSqlManager;
import org.opencms.db.generic.CmsUserDriver;
import org.opencms.db.generic.CmsVfsDriver;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsProject;
import org.opencms.file.CmsRequestContext;
import org.opencms.file.CmsResourceFilter;
import org.opencms.main.CmsCoreProvider;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.ocee.db.transaction.CmsTransactionDbContext;
import org.opencms.ocee.db.transaction.CmsTransactionDbContextFactory;
import org.opencms.util.CmsFileUtil;
import org.opencms.util.CmsStringUtil;
import org.opencms.util.CmsUUID;

public class CmsReplicationServer implements Serializable, Cloneable, Comparable {
   private static final long Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = -2776446610735387038L;
   private String õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000int;
   private String oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do;
   private String Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void;
   private boolean Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   private I_CmsHistoryDriver ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private;
   private CmsReplicationMode ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000if;
   private String ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface;
   private CmsProject Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;
   private String ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public;
   private String ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper;
   private I_CmsProjectDriver ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float;
   private I_CmsReplicationNotifier o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   private CmsProject OO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000for = null;
   private CmsUUID Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   private List ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null = new ArrayList();
   private I_CmsUserDriver ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while;
   private I_CmsVfsDriver Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;

   public static CmsDbContext getDbContext(CmsRequestContext context, CmsProject project) {
      I_CmsDbContextFactory dbContextFactory = CmsCoreProvider.getInstance().getRuntimeInfoFactory();
      CmsReplicationServer server = CmsReplicationManager.getServerByProject(project.getUuid());
      if (server != null) {
         CmsReplicationDbContext normalDbc = new CmsReplicationDbContext(context);
         normalDbc.setProjectId(project.getUuid());
         return normalDbc;
      } else {
         CmsTransactionDbContext dbct;
         if (dbContextFactory instanceof CmsTransactionDbContextFactory) {
            CmsTransactionDbContextFactory factory = (CmsTransactionDbContextFactory)dbContextFactory;
            dbct = factory.getTransactionDbContext(context, project);
            dbct.getTransaction().setReplicationTransaction(true);
            return dbct;
         } else if (dbContextFactory instanceof CmsReplicationTransactionDbContextFactory) {
            CmsReplicationTransactionDbContextFactory factory = (CmsReplicationTransactionDbContextFactory)dbContextFactory;
            dbct = factory.getTransactionDbContext(context, project);
            dbct.getTransaction().setReplicationTransaction(true);
            return dbct;
         } else {
            CmsDbContext dbc = dbContextFactory.getDbContext(context);
            dbc.setProjectId(project.getUuid());
            return dbc;
         }
      }
   }

   public void addSourceName(String source) {
      this.ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null.add(source);
   }

   public int compareTo(Object obj) {
      if (obj == this) {
         return 0;
      } else {
         if (obj instanceof CmsReplicationServer) {
            CmsReplicationServer server = (CmsReplicationServer)obj;
            if (this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public != null && !this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public.equals(server.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public)) {
               return this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public.compareTo(server.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public);
            }

            if (this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do != null && !this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do.equals(server.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do)) {
               return this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do.compareTo(server.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do);
            }

            if (this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface != null && !this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface.equals(server.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface)) {
               return this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface.compareTo(server.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface);
            }
         }

         return 0;
      }
   }

   public boolean equals(Object obj) {
      if (obj == this) {
         return true;
      } else {
         return obj instanceof CmsReplicationServer ? ((CmsReplicationServer)obj).Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.equals(this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object) : false;
      }
   }

   public CmsDbContext getDbContext(CmsRequestContext context) {
      return getDbContext(context, this.getReplicationProject());
   }

   public String getDescription() {
      return this.õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000int;
   }

   public String getDestServerName() {
      return this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do;
   }

   public String getDestServerPoolUrl() {
      return this.Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void;
   }

   public String getDisplayName() {
      StringBuffer res = new StringBuffer(256);
      res.append(this.getOrgServerName());
      res.append(" -> ");
      res.append(this.getDestServerName());
      res.append(" (");
      res.append(this.getName());
      res.append(")");
      return res.toString();
   }

   public I_CmsHistoryDriver getHistoryDriver() {
      return this.ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private;
   }

   public I_CmsHistoryDriver getHistoryDriverOrDefault() {
      return this.ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private != null ? this.ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private : CmsReplicationManager.getInstance().getDriverManager().getHistoryDriver();
   }

   public CmsReplicationMode getMode() {
      return this.ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000if;
   }

   public String getName() {
      return this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface;
   }

   public CmsProject getOrgReplicationProject() {
      if (this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return == null) {
         CmsReplicationManager.getInstance().lazyInitialization((CmsObject)null);
      }

      return this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;
   }

   public String getOrgServerName() {
      return this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public;
   }

   public String getOrgServerPoolUrl() {
      return this.ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper;
   }

   public I_CmsProjectDriver getProjectDriver() {
      return this.ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float;
   }

   public I_CmsProjectDriver getProjectDriverOrDefault() {
      return this.ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float != null ? this.ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float : CmsReplicationManager.getInstance().getDriverManager().getProjectDriver();
   }

   public I_CmsReplicationNotifier getReplicationNotifier() {
      return this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   }

   public CmsProject getReplicationProject() {
      if (this.OO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000for == null) {
         CmsReplicationManager.getInstance().lazyInitialization((CmsObject)null);
      }

      return this.OO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000for;
   }

   public List getReplicationResources(boolean includeOus) {
      List result = new ArrayList();
      int i = 0;

      for(int n = this.getSources().size(); i < n; ++i) {
         String sourceName = (String)this.getSources().get(i);
         result.addAll((List)CmsReplicationManager.getInstance().getConfiguration().getReplicationSources().get(sourceName));
      }

      String ouPath = "/system/orgunits/";
      if (includeOus && !result.contains(ouPath)) {
         result.add(ouPath);
      }

      if (!includeOus) {
         result.remove(ouPath);
      }

      return Collections.unmodifiableList(CmsFileUtil.removeRedundancies(result));
   }

   public CmsUUID getServerId() {
      return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   }

   public List getServerResources(CmsRequestContext requestContext, String resourcename) throws CmsException {
      CmsReplicationManager.getInstance().lazyInitialization((CmsObject)null);
      CmsDbContext remoteDbc = this.getDbContext(requestContext);

      List var4;
      try {
         var4 = this.getVfsDriverOrDefault().readResourceTree(remoteDbc, this.getReplicationProject().getUuid(), resourcename, CmsResourceFilter.ALL.getType(), CmsResourceFilter.ALL.getState(), CmsResourceFilter.ALL.getModifiedAfter(), CmsResourceFilter.ALL.getModifiedBefore(), CmsResourceFilter.ALL.getReleaseAfter(), CmsResourceFilter.ALL.getReleaseBefore(), CmsResourceFilter.ALL.getExpireAfter(), CmsResourceFilter.ALL.getExpireBefore(), 0);
      } finally {
         if (remoteDbc != null) {
            remoteDbc.clear();
         }

      }

      return var4;
   }

   public List getSources() {
      return this.ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null;
   }

   public I_CmsUserDriver getUserDriver() {
      return this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while;
   }

   public I_CmsUserDriver getUserDriverOrDefault() {
      return this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while != null ? this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while : CmsReplicationManager.getInstance().getDriverManager().getUserDriver();
   }

   public I_CmsVfsDriver getVfsDriver() {
      return this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String;
   }

   public I_CmsVfsDriver getVfsDriverOrDefault() {
      return this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String != null ? this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String : CmsReplicationManager.getInstance().getDriverManager().getVfsDriver();
   }

   public boolean hasDrivers() {
      return this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   }

   public int hashCode() {
      return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object.hashCode();
   }

   public boolean hasReplicationNotifier() {
      return this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super != null;
   }

   public boolean hasResource(String resourceRootPath, boolean includeNeededFolders, boolean includeOus) {
      Iterator i = this.getReplicationResources(includeOus).iterator();

      String currentFolder;
      do {
         if (!i.hasNext()) {
            return false;
         }

         currentFolder = (String)i.next();
         if (resourceRootPath.startsWith(currentFolder)) {
            return true;
         }
      } while(!includeNeededFolders || !currentFolder.startsWith(resourceRootPath));

      return true;
   }

   public void initHistoryDriver(String driverClass, String sqlManagerClass) throws CmsException {
      if (CmsReplicationManager.supportsMultiDbReplication()) {
         this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = true;

         try {
            CmsHistoryDriver driver = (CmsHistoryDriver)Class.forName(driverClass).newInstance();
            CmsConfigurationManager confManager = CmsCoreProvider.getInstance().getConfigurationManager();
            driver.init((CmsDbContext)null, confManager, (List)null, (CmsDriverManager)null);
            CmsSqlManager sqlManager = driver.initSqlManager(sqlManagerClass);
            sqlManager.init(0, this.getDestServerPoolUrl());
            driver.setSqlManager(sqlManager);
            this.ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private = driver;
         } catch (Exception var6) {
            throw new CmsException(Messages.get().container("ERR_CANT_INIT_DRIVER_0"), var6);
         }
      }
   }

   public void initProjectDriver(String driverClass, String sqlManagerClass) throws CmsException {
      if (CmsReplicationManager.supportsMultiDbReplication()) {
         this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = true;

         try {
            CmsProjectDriver driver = (CmsProjectDriver)Class.forName(driverClass).newInstance();
            CmsConfigurationManager confManager = CmsCoreProvider.getInstance().getConfigurationManager();
            driver.init((CmsDbContext)null, confManager, (List)null, (CmsDriverManager)null);
            CmsSqlManager sqlManager = driver.initSqlManager(sqlManagerClass);
            sqlManager.init(1, this.getDestServerPoolUrl());
            driver.setSqlManager(sqlManager);
            this.ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float = driver;
         } catch (Exception var6) {
            throw new CmsException(Messages.get().container("ERR_CANT_INIT_DRIVER_0"), var6);
         }
      }
   }

   public void initUserDriver(String driverClass, String sqlManagerClass) throws CmsException {
      if (CmsReplicationManager.supportsMultiDbReplication()) {
         this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = true;

         try {
            CmsUserDriver driver = (CmsUserDriver)Class.forName(driverClass).newInstance();
            CmsConfigurationManager confManager = CmsCoreProvider.getInstance().getConfigurationManager();
            driver.init((CmsDbContext)null, confManager, (List)null, (CmsDriverManager)null);
            CmsSqlManager sqlManager = driver.initSqlManager(sqlManagerClass);
            sqlManager.init(2, this.getDestServerPoolUrl());
            driver.setSqlManager(sqlManager);
            this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while = driver;
         } catch (Exception var6) {
            throw new CmsException(Messages.get().container("ERR_CANT_INIT_DRIVER_0"), var6);
         }
      }
   }

   public void initVfsDriver(String driverClass, String sqlManagerClass) throws CmsException {
      if (CmsReplicationManager.supportsMultiDbReplication()) {
         this.Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = true;

         try {
            CmsVfsDriver driver = (CmsVfsDriver)Class.forName(driverClass).newInstance();
            CmsConfigurationManager confManager = CmsCoreProvider.getInstance().getConfigurationManager();
            driver.init((CmsDbContext)null, confManager, (List)null, (CmsDriverManager)null);
            CmsSqlManager sqlManager = driver.initSqlManager(sqlManagerClass);
            sqlManager.init(3, this.getDestServerPoolUrl());
            driver.setSqlManager(sqlManager);
            this.Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = driver;
         } catch (Exception var6) {
            throw new CmsException(Messages.get().container("ERR_CANT_INIT_DRIVER_0"), var6);
         }
      }
   }

   public void reservePool(CmsProject replicationProject, String poolUrl) {
      CmsReplicationManager.getOceeSqlManager(this.getUserDriverOrDefault().getSqlManager()).setReservedPoolUrl(replicationProject.getUuid(), poolUrl);
      CmsReplicationManager.getOceeSqlManager(this.getHistoryDriverOrDefault().getSqlManager()).setReservedPoolUrl(replicationProject.getUuid(), poolUrl);
      CmsReplicationManager.getOceeSqlManager(this.getProjectDriverOrDefault().getSqlManager()).setReservedPoolUrl(replicationProject.getUuid(), poolUrl);
      CmsReplicationManager.getOceeSqlManager(this.getVfsDriverOrDefault().getSqlManager()).setReservedPoolUrl(replicationProject.getUuid(), poolUrl);
   }

   public void setDescription(String description) {
      this.õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000int = description;
   }

   public void setDestServerName(String destServerName) {
      this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do = destServerName;
   }

   public void setDestServerPoolUrl(String destServerPoolUrl) {
      this.Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void = destServerPoolUrl;
   }

   public void setDriverManager(CmsDriverManager driverManager) {
      if (this.hasDrivers()) {
         ((CmsUserDriver)this.getUserDriver()).setDriverManager(driverManager);
         ((CmsVfsDriver)this.getVfsDriver()).setDriverManager(driverManager);
         ((CmsHistoryDriver)this.getHistoryDriver()).setDriverManager(driverManager);
         ((CmsProjectDriver)this.getProjectDriver()).setDriverManager(driverManager);
      }

   }

   public void setMode(String replicationMode) {
      this.ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000if = CmsReplicationMode.valueOf(replicationMode);
   }

   public void setName(String name) {
      this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface = name;
   }

   public void setOrgReplicationProject(CmsProject replicationProject) {
      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = replicationProject;
   }

   public void setOrgServerName(String orgServerName) {
      this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public = orgServerName;
   }

   public void setOrgServerPoolUrl(String orgServerPoolUrl) {
      this.ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper = orgServerPoolUrl;
   }

   public void setReplicationNotifier(String replicationNotifierClassName) {
      if (!CmsStringUtil.isEmptyOrWhitespaceOnly(replicationNotifierClassName)) {
         try {
            this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = (I_CmsReplicationNotifier)Class.forName(replicationNotifierClassName).newInstance();
            if (CmsLog.INIT.isInfoEnabled()) {
               CmsLog.INIT.info("VFS notification configured for server '" + this.getName() + "': " + replicationNotifierClassName);
            }
         } catch (Exception var3) {
            if (CmsLog.INIT.isErrorEnabled()) {
               CmsLog.INIT.error("Failed to configure VFS notification for server '" + this.getName() + "': " + replicationNotifierClassName);
            }
         }

      }
   }

   public void setReplicationProject(CmsProject replicationProject) {
      this.OO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000for = replicationProject;
   }

   public void setServerId(String id) {
      this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = CmsStringUtil.isNotEmptyOrWhitespaceOnly(id) ? new CmsUUID(id) : null;
   }

   public void setSources(List sources) {
      this.ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null = sources;
   }

   public String toString() {
      StringBuffer buf = new StringBuffer();
      buf.append("[");
      buf.append("id=").append(this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object).append(", ");
      buf.append("name=").append(this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface).append(", ");
      buf.append("org=").append(this.ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public).append(", ");
      buf.append("org pool=").append(this.ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper).append(", ");
      buf.append("dest=").append(this.oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do).append(", ");
      buf.append("dest pool=").append(this.Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void).append(", ");
      buf.append("sources={");
      int i = 0;

      for(int n = this.ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null.size(); i < n; ++i) {
         buf.append((String)this.ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null.get(i));
         if (i < n - 1) {
            buf.append(",");
         }
      }

      buf.append("}");
      buf.append("]");
      return buf.toString();
   }
}
