package org.opencms.ocee.replication;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import org.apache.commons.logging.Log;
import org.dom4j.Element;
import org.opencms.db.CmsDbContext;
import org.opencms.db.CmsPublishedResource;
import org.opencms.db.CmsResourceState;
import org.opencms.file.CmsDataAccessException;
import org.opencms.file.CmsFile;
import org.opencms.file.CmsFolder;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsProject;
import org.opencms.file.CmsProperty;
import org.opencms.file.CmsRequestContext;
import org.opencms.file.CmsResource;
import org.opencms.file.CmsUser;
import org.opencms.file.CmsVfsResourceNotFoundException;
import org.opencms.i18n.CmsMessageContainer;
import org.opencms.i18n.CmsMessages;
import org.opencms.importexport.CmsExport;
import org.opencms.importexport.CmsExportParameters;
import org.opencms.main.CmsEvent;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.main.OpenCms;
import org.opencms.ocee.base.CmsOceeManager;
import org.opencms.ocee.cluster.CmsClusterEventTypes;
import org.opencms.relations.CmsRelationFilter;
import org.opencms.report.I_CmsReport;
import org.opencms.util.CmsFileUtil;
import org.opencms.util.CmsStringUtil;
import org.opencms.util.CmsUUID;

public class CmsReplicationVfsHandler extends A_CmsReplicationHandler {
   private static final String[] ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface = new String[]{"ACL", "CMS_OFFLINE_ACCESSCONTROL", "CMS_ONLINE_ACCESSCONTROL"};
   private static final String[] Òo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000nullsuper = new String[]{"VFS", "CMS_HISTORY_PROJECTRESOURCES", "CMS_HISTORY_PROJECTS", "CMS_HISTORY_PROPERTIES", "CMS_HISTORY_PROPERTYDEF", "CMS_HISTORY_RESOURCES", "CMS_HISTORY_STRUCTURE", "CMS_OFFLINE_CONTENTS", "CMS_OFFLINE_PROPERTIES", "CMS_OFFLINE_PROPERTYDEF", "CMS_OFFLINE_RESOURCE_RELATIONS", "CMS_OFFLINE_RESOURCES", "CMS_OFFLINE_STRUCTURE", "CMS_CONTENTS", "CMS_ONLINE_PROPERTIES", "CMS_ONLINE_PROPERTYDEF", "CMS_ONLINE_RESOURCE_RELATIONS", "CMS_ONLINE_RESOURCES", "CMS_ONLINE_STRUCTURE", "CMS_PROJECTRESOURCES", "CMS_PROJECTS", "CMS_PUBLISH_HISTORY"};
   private static final DateFormat ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
   private static final DateFormat ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
   private static final CmsMessageContainer ØO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000supersuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_DETAILS_FILES_HELP_0");
   private static final CmsMessageContainer õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_DETAILS_FILES_NAME_0");
   private static final CmsMessageContainer øO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000classsuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_DETAILS_FOLDERS_HELP_0");
   private static final CmsMessageContainer Öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000forsuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_DETAILS_FOLDERS_NAME_0");
   private static final CmsMessageContainer ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000whilesuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_HELP_0");
   private static final CmsMessageContainer öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000privatesuper = Messages.get().container("GUI_REPLICATION_HANDLER_VFS_NAME_0");
   private static final Log oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper = CmsLog.getLog(CmsReplicationVfsHandler.class);
   private static final String Oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000returnsuper = "files";
   private static final String Õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000floatsuper = "folders";
   private static final List Ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ifsuper = Collections.unmodifiableList(Arrays.asList("files", "folders"));
   private int öO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringsuper;
   private int Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper;
   private StringBuffer õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper;
   private List Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper;

   public void cleanUp(CmsObject cms, CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, List publishedResources) throws CmsDataAccessException {
      try {
         if (CmsReplicationManager.publishedResourcesListContains(publishedResources, "/")) {
            this.deleteDbTables(report, Òo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000nullsuper, server);
            this.deleteDbTables(report, ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface, server);
            CmsDbContext serverDbc = CmsReplicationServer.getDbContext(dbc.getRequestContext(), server.getOrgReplicationProject());
            this.replicateProject(serverDbc, report, server, CmsProject.ONLINE_PROJECT_ID);
         } else {
            List folderNames = new ArrayList();
            Iterator it = publishedResources.iterator();

            while(it.hasNext()) {
               CmsPublishedResource res = (CmsPublishedResource)it.next();
               if (res.isFolder() && server.hasResource(res.getRootPath(), false, false)) {
                  folderNames.add(res.getRootPath());
               }
            }

            List resourcesToDelete = this.retrieveRemoteVfsToDelete(dbc.getRequestContext(), report, server, CmsFileUtil.removeRedundancies(folderNames));
            this.replicate(cms, dbc, report, server, resourcesToDelete, true);
         }

      } catch (CmsException var9) {
         throw new CmsReplicationException(var9.getMessageContainer(), var9);
      }
   }

   public CmsMessageContainer getHelpText() {
      return ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000whilesuper;
   }

   public CmsMessageContainer getName() {
      return öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000privatesuper;
   }

   public CmsMessageContainer getStatDetailHelpText(String key) {
      if (key.equals("files")) {
         return ØO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000supersuper;
      } else {
         return key.equals("folders") ? øO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000classsuper : null;
      }
   }

   public List getStatDetailKeys() {
      return Ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ifsuper;
   }

   public CmsMessageContainer getStatDetailName(String key) {
      if (key.equals("files")) {
         return õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper;
      } else {
         return key.equals("folders") ? Öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000forsuper : null;
      }
   }

   public boolean needResources() {
      return true;
   }

   public void replicate(CmsObject cms, CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, List publishedResources, boolean isFullReplication) throws CmsDataAccessException {
      this.initStats(cms);

      try {
         if (!publishedResources.isEmpty()) {
            List vfsRes = this.filterVfsResources(server, publishedResources, isFullReplication);
            if (!vfsRes.isEmpty()) {
               CmsUUID publishHistoryId = new CmsUUID();

               try {
                  this.replicateVfsResources(dbc, report, server, publishHistoryId, vfsRes);
               } finally {
                  publishedResources.clear();
                  publishedResources.addAll(vfsRes);
               }

               if (server.hasReplicationNotifier()) {
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isDebugEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.debug("Notifying before event propagation.\nServer: " + server.getName() + "\nHistoryId: " + publishHistoryId.toString());
                  }

                  server.getReplicationNotifier().beforeEventNotification(cms, report, server, publishHistoryId);
               }

               Map clusterEventData = new HashMap();
               clusterEventData.put("publishHistoryId", publishHistoryId.toString());
               CmsEvent event = new CmsEvent(CmsClusterEventTypes.PUBLISH_PROJECT.getType(), clusterEventData);
               OpenCms.fireCmsEvent(event);
               if (server.hasReplicationNotifier()) {
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isDebugEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.debug("Notifying after event propagation.\nServer: " + server.getName() + "\nHistoryId: " + publishHistoryId.toString());
                  }

                  server.getReplicationNotifier().afterEventNotification(cms, report, server, publishHistoryId);
               }
            }
         }
      } catch (CmsException var21) {
         throw new CmsReplicationException(var21.getMessageContainer(), var21);
      } finally {
         this.setStatistics(this.buildDetails());
         if ("opencms:default".equals(server.getOrgServerPoolUrl())) {
            this.exportHistory(dbc, report, server);
         }

      }

   }

   protected void addReplicationHistory(String rootPath, CmsResourceState state, CmsUUID userLastModified, long dateLastModified) {
      if (CmsReplicationManager.getInstance().getConfiguration().getExportFolder() != null) {
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.format(new Date(System.currentTimeMillis())));
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(" ");
         if (userLastModified != null) {
            try {
               CmsUser user = this.getCms().readUser(userLastModified);
               this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(CmsStringUtil.padRight(user.getName(), 37));
            } catch (CmsException var7) {
               this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(userLastModified);
               this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(" ");
            }

            this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.format(new Date(dateLastModified)));
            this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(" ");
         } else {
            this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(CmsStringUtil.padLeft("", 57));
         }

         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(state.getAbbreviation());
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(" ");
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(rootPath);
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append('\n');
         if (!state.isDeleted()) {
            this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper.add(rootPath);
         }

      }
   }

   protected Map buildDetails() {
      Map details = new HashMap();
      details.put("files", Integer.toString(this.öO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringsuper));
      details.put("folders", Integer.toString(this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper));
      return details;
   }

   protected void exportHistory(CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server) {
      if (CmsReplicationManager.getInstance().getConfiguration().getExportFolder() != null) {
         CmsMessages msg = Messages.get().getBundle(report.getLocale());
         String user;
         if (dbc.getRequestContext() != null) {
            user = dbc.getRequestContext().currentUser().getName();
         } else {
            user = msg.key("LOG_REPLICATION_HEADER_NOBODY_0");
         }

         String date = ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.format(new Date(System.currentTimeMillis()));
         String filename = CmsReplicationManager.getInstance().getConfiguration().getExportFolder() + "rhe_" + server.getName() + "_" + ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper.format(new Date(System.currentTimeMillis()));
         if (!this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper.isEmpty()) {
            String storedSiteRoot = this.getCms().getRequestContext().getSiteRoot();

            try {
               this.getCms().getRequestContext().setSiteRoot("/");
               report.println(Messages.get().container("RPT_REPLICATION_EXPORT_BEGIN_0"), 2);
               if (!CmsOceeManager.getInstance().checkCoreVersion("7.0.4")) {
                  new CmsExport(this.getCms(), filename + ".zip", this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper, true, true, (Element)null, false, 0L, report, false);
               } else {
                  CmsExport export = new CmsExport(this.getCms(), report);
                  export.exportData(new CmsExportParameters(filename + ".zip", (Element)null, true, false, false, this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper, true, true, 0L, false, false));
               }

               report.println(Messages.get().container("RPT_REPLICATION_EXPORT_END_0"), 2);
            } catch (CmsException var16) {
               this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append("\n");
               this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.append(CmsException.getStackTraceAsString(var16));
            } finally {
               this.getCms().getRequestContext().setSiteRoot(storedSiteRoot);
            }
         }

         StringBuffer header = new StringBuffer(512);
         header.append(msg.key("LOG_REPLICATION_HEADER_USER_1", new Object[]{user}));
         header.append("\n");
         header.append(msg.key("LOG_REPLICATION_HEADER_DATE_1", new Object[]{date}));
         header.append("\n");
         header.append(msg.key("LOG_REPLICATION_HEADER_SERVER_1", new Object[]{server.getName()}));
         header.append("\n");
         if (!this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper.isEmpty()) {
            header.append(msg.key("LOG_REPLICATION_HEADER_ZIP_1", new Object[]{filename + ".zip"}));
            header.append("\n");
         }

         header.append("\n");

         try {
            File file = new File(filename + ".log");
            PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file)));
            pw.print(header.toString());
            pw.print(this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper);
            pw.close();
         } catch (IOException var15) {
            report.println(var15);
         }

      }
   }

   protected List filterVfsResources(CmsReplicationServer server, List resources, boolean includeOus) {
      List result = new ArrayList();
      Iterator i = resources.iterator();

      while(i.hasNext()) {
         CmsPublishedResource currentPublishedResource = (CmsPublishedResource)i.next();
         if (server.hasResource(currentPublishedResource.getRootPath(), true, includeOus)) {
            result.add(currentPublishedResource);
         }
      }

      return result;
   }

   protected void initStats(CmsObject cms) {
      super.initStats(cms);
      this.öO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringsuper = 0;
      this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper = 0;
      if (CmsReplicationManager.getInstance().getConfiguration().getExportFolder() != null) {
         this.Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper = new ArrayList();
         this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper = new StringBuffer(2048);
      }
   }

   protected void replicateDeletedFolder(CmsRequestContext requestContext, I_CmsReport report, CmsReplicationServer server, CmsUUID publishHistoryId, CmsPublishedResource deletedFolder) throws CmsException {
      CmsFolder remoteFolder = null;
      CmsDbContext remoteDbc = server.getDbContext(requestContext);
      CmsProject remoteOnlineProject = server.getReplicationProject();

      try {
         report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
         report.print(org.opencms.db.generic.Messages.get().container("RPT_DELETE_FILE_0"), 3);
         report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", deletedFolder.getRootPath()));
         report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));

         try {
            remoteFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), deletedFolder.getStructureId());
         } catch (CmsDataAccessException var36) {
         }

         if (remoteFolder != null) {
            try {
               remoteFolder.setState(CmsResource.STATE_DELETED);
               CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(remoteFolder, deletedFolder.getPublishTag()));
            } catch (CmsDataAccessException var40) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FOLDER_HISTORY_1", new Object[]{deletedFolder.toString()}), var40);
               }

               throw var40;
            } finally {
               remoteFolder.setState(CmsResource.STATE_UNCHANGED);
            }

            List movedFiles = null;
            movedFiles = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResourceTree(remoteDbc, remoteOnlineProject.getUuid(), remoteFolder.getRootPath(), -1, (CmsResourceState)null, 0L, 0L, 0L, 0L, 0L, 0L, 128);
            if (movedFiles != null) {
               Iterator it = movedFiles.iterator();

               while(it.hasNext()) {
                  CmsResource delFile = (CmsResource)it.next();

                  try {
                     delFile.setState(CmsResource.STATE_DELETED);
                     CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(delFile, deletedFolder.getPublishTag()));
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deletePropertyObjects(remoteDbc, remoteOnlineProject.getUuid(), delFile, 1);
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).removeFile(remoteDbc, remoteOnlineProject.getUuid(), delFile);
                  } catch (Exception var42) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_DELETING_FILE_PROPERTIES_1", new Object[]{delFile.toString()}), var42);
                     }
                  }
               }
            }

            try {
               CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deletePropertyObjects(remoteDbc, remoteOnlineProject.getUuid(), remoteFolder, 1);
            } catch (CmsDataAccessException var39) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_DELETING_FOLDER_PROPERTIES_1", new Object[]{deletedFolder.toString()}), var39);
               }

               throw var39;
            }

            try {
               CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).removeFolder(remoteDbc, remoteOnlineProject, remoteFolder);
            } catch (CmsDataAccessException var38) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_REMOVING_FOLDER_1", new Object[]{deletedFolder.toString()}), var38);
               }

               throw var38;
            }

            try {
               CmsReplicationManager.getUserDriver(this.getDriverManager(), remoteDbc).removeAccessControlEntries(remoteDbc, remoteOnlineProject, remoteFolder.getResourceId());
            } catch (CmsDataAccessException var37) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_REMOVING_FOLDER_ACLS_1", new Object[]{deletedFolder.toString()}), var37);
               }

               throw var37;
            }

            if (!deletedFolder.isMoved()) {
               try {
                  CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deleteRelations(remoteDbc, remoteOnlineProject.getUuid(), remoteFolder, CmsRelationFilter.ALL);
               } catch (CmsDataAccessException var35) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(var35.getLocalizedMessage(), var35);
               }
            }
         }

         if (remoteFolder != null) {
            this.addReplicationHistory(remoteFolder.getRootPath(), CmsResource.STATE_DELETED, remoteFolder.getUserLastModified(), remoteFolder.getDateLastModified());
         } else {
            this.addReplicationHistory(deletedFolder.getRootPath(), CmsResource.STATE_DELETED, (CmsUUID)null, 0L);
         }

         report.println(org.opencms.report.Messages.get().container("RPT_OK_0"), 4);
      } catch (CmsDataAccessException var43) {
         CmsMessageContainer message = Messages.get().container("ERR_ERROR_REPLICATING_VFS_RESOURCE_2", deletedFolder.getRootPath(), server.getName());
         if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
            oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(message.key(), var43);
         }

         remoteDbc.report(report, message, var43);
      } finally {
         remoteDbc.clear();
      }

   }

   protected void replicateFile(CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, CmsProject localOnlineProject, CmsUUID publishHistoryId, CmsPublishedResource publishedFile, Set replicatedResourceIds) throws CmsException {
      CmsFile newFile = null;
      CmsResource remoteFileHeader = null;
      List localProperties = null;
      CmsResource localFileHeader = null;
      CmsDbContext remoteDbc = server.getDbContext(dbc.getRequestContext());
      CmsProject remoteOnlineProject = server.getReplicationProject();
      if (!publishedFile.getState().isDeleted()) {
         this.replicateParent(dbc, remoteDbc, report, server, localOnlineProject, publishHistoryId, publishedFile);
      }

      try {
         try {
            CmsResourceState state = publishedFile.getState();
            if (state.isChanged()) {
               try {
                  CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResource(remoteDbc, remoteOnlineProject.getUuid(), publishedFile.getRootPath(), true);
               } catch (CmsDataAccessException var144) {
                  state = CmsResource.STATE_NEW;
               }
            } else if (state.isNew()) {
               try {
                  CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResource(remoteDbc, remoteOnlineProject.getUuid(), publishedFile.getRootPath(), true);
                  state = CmsResource.STATE_CHANGED;
               } catch (CmsDataAccessException var143) {
               }
            }

            if (!state.isDeleted()) {
               try {
                  localFileHeader = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readResource(dbc, localOnlineProject.getUuid(), publishedFile.getRootPath(), true);
               } catch (CmsException var164) {
                  report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
                  report.print(Messages.get().container("RPT_REPLICATE_0"), 3);
                  report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", publishedFile.getRootPath()));
                  report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));
                  report.println(org.opencms.report.Messages.get().container("RPT_SKIPPED_0"), 1);
                  CmsMessageContainer message = Messages.get().container("ERR_ERROR_REPLICATING_VFS_RESOURCE_2", publishedFile.getRootPath(), server.getName());
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isWarnEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.warn(message.key(), var164);
                  }

                  return;
               }
            }

            if (state.isDeleted()) {
               report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
               report.print(org.opencms.db.generic.Messages.get().container("RPT_DELETE_FILE_0"), 3);
               report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", publishedFile.getRootPath()));
               report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));

               try {
                  remoteFileHeader = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResource(remoteDbc, remoteOnlineProject.getUuid(), publishedFile.getRootPath(), true);
               } catch (CmsDataAccessException var142) {
               }

               if (remoteFileHeader != null) {
                  try {
                     remoteFileHeader.setState(CmsResource.STATE_DELETED);
                     CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(remoteFileHeader, publishedFile.getPublishTag()));
                  } catch (CmsDataAccessException var162) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_HISTORY_1", new Object[]{publishedFile.toString()}), var162);
                     }

                     throw var162;
                  } finally {
                     remoteFileHeader.setState(CmsResource.STATE_UNCHANGED);
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deletePropertyObjects(remoteDbc, remoteOnlineProject.getUuid(), remoteFileHeader, 1);
                  } catch (CmsDataAccessException var161) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_DELETING_FILE_PROPERTIES_1", new Object[]{publishedFile.getRootPath()}), var161);
                     }

                     throw var161;
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).removeFile(remoteDbc, remoteOnlineProject.getUuid(), remoteFileHeader);
                  } catch (CmsDataAccessException var160) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_REMOVING_FILE_1", new Object[]{publishedFile.getRootPath()}), var160);
                     }

                     throw var160;
                  }

                  try {
                     CmsReplicationManager.getUserDriver(this.getDriverManager(), remoteDbc).removeAccessControlEntries(remoteDbc, remoteOnlineProject, remoteFileHeader.getResourceId());
                  } catch (CmsDataAccessException var159) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_REMOVING_FILE_ACLS_1", new Object[]{publishedFile.getRootPath()}), var159);
                     }

                     throw var159;
                  }

                  if (!publishedFile.isMoved()) {
                     try {
                        CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deleteRelations(remoteDbc, remoteOnlineProject.getUuid(), remoteFileHeader, CmsRelationFilter.ALL);
                     } catch (CmsDataAccessException var141) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(var141.getLocalizedMessage(), var141);
                     }
                  }
               }
            } else {
               if (localFileHeader == null) {
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isWarnEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.warn(Messages.get().getBundle().key("ERR_ERROR_REPLICATING_VFS_RESOURCE_2", publishedFile.getRootPath(), server.getName()));
                  }

                  return;
               }

               boolean needToUpdateContent;
               int publishTag;
               if (state.isChanged()) {
                  report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
                  report.print(Messages.get().container("RPT_REPLICATE_0"), 3);
                  report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", publishedFile.getRootPath()));
                  report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));

                  try {
                     remoteFileHeader = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResource(remoteDbc, remoteOnlineProject.getUuid(), localFileHeader.getRootPath(), false);
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deletePropertyObjects(remoteDbc, remoteOnlineProject.getUuid(), remoteFileHeader, 1);
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).removeFile(remoteDbc, remoteOnlineProject.getUuid(), remoteFileHeader);
                     replicatedResourceIds.remove(localFileHeader.getResourceId());
                  } catch (CmsDataAccessException var158) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_DELETING_FILE_PROPERTIES_1", new Object[]{localFileHeader.toString()}), var158);
                     }

                     throw var158;
                  }

                  try {
                     needToUpdateContent = remoteFileHeader.getDateContent() < localFileHeader.getDateContent();
                     needToUpdateContent = needToUpdateContent && !replicatedResourceIds.contains(localFileHeader.getResourceId());
                     publishTag = this.getDriverManager().getNextPublishTag(remoteDbc);
                     if (!CmsOceeManager.getInstance().checkCoreVersion("7.0.5")) {
                        publishTag = publishedFile.getPublishTag();
                     }

                     newFile = CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).publishFileContent(remoteDbc, localOnlineProject, remoteOnlineProject, localFileHeader, replicatedResourceIds, needToUpdateContent, publishTag);
                  } catch (CmsDataAccessException var167) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_UPDATING_FILE_1", new Object[]{localFileHeader.toString()}), var167);
                     }

                     throw var167;
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).publishResource(remoteDbc, remoteOnlineProject, newFile, localFileHeader);
                  } catch (CmsDataAccessException var157) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_UPDATING_FILE_1", new Object[]{localFileHeader.toString()}), var157);
                     }

                     throw var157;
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).updateRelations(remoteDbc, remoteOnlineProject, localFileHeader);
                  } catch (CmsDataAccessException var156) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_UPDATING_FILE_1", new Object[]{localFileHeader.toString()}), var156);
                     }

                     throw var156;
                  }

                  try {
                     localProperties = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readPropertyObjects(dbc, localOnlineProject, localFileHeader);
                     CmsProperty.setAutoCreatePropertyDefinitions(localProperties, true);
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).writePropertyObjects(remoteDbc, remoteOnlineProject, newFile, localProperties);
                  } catch (CmsDataAccessException var155) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_PROPERTIES_1", new Object[]{newFile.toString()}), var155);
                     }

                     throw var155;
                  }

                  try {
                     CmsReplicationManager.getUserDriver(this.getDriverManager(), remoteDbc).publishAccessControlEntries(remoteDbc, localOnlineProject, remoteOnlineProject, newFile.getResourceId(), remoteFileHeader.getResourceId());
                  } catch (CmsDataAccessException var154) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_ACLS_1", new Object[]{newFile.toString()}), var154);
                     }

                     throw var154;
                  }

                  try {
                     remoteFileHeader.setState(CmsResource.STATE_CHANGED);
                     CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(remoteFileHeader, publishedFile.getPublishTag()));
                  } catch (CmsDataAccessException var152) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_HISTORY_1", new Object[]{localFileHeader.toString()}), var152);
                     }

                     throw var152;
                  } finally {
                     remoteFileHeader.setState(CmsResource.STATE_UNCHANGED);
                  }
               } else if (state.isNew()) {
                  report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
                  report.print(Messages.get().container("RPT_REPLICATE_0"), 3);
                  report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", publishedFile.getRootPath()));
                  report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));
                  needToUpdateContent = !replicatedResourceIds.contains(localFileHeader.getResourceId());
                  publishTag = this.getDriverManager().getNextPublishTag(remoteDbc);
                  if (!CmsOceeManager.getInstance().checkCoreVersion("7.0.5")) {
                     publishTag = publishedFile.getPublishTag();
                  }

                  try {
                     newFile = CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).publishFileContent(remoteDbc, localOnlineProject, remoteOnlineProject, localFileHeader, replicatedResourceIds, needToUpdateContent, publishTag);
                  } catch (CmsVfsResourceNotFoundException var165) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isDebugEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.debug(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}), var165);
                     }

                     try {
                        CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).removeFile(remoteDbc, remoteOnlineProject.getUuid(), localFileHeader);
                        replicatedResourceIds.remove(localFileHeader.getResourceId());
                        CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).publishFileContent(remoteDbc, localOnlineProject, remoteOnlineProject, localFileHeader, replicatedResourceIds, true, publishTag);
                     } catch (CmsDataAccessException var151) {
                        if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                           oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}), var151);
                        }

                        throw var151;
                     }
                  } catch (CmsDataAccessException var166) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}), var166);
                     }

                     throw var166;
                  }

                  if (newFile == null) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}));
                     }

                     return;
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).publishResource(remoteDbc, remoteOnlineProject, newFile, localFileHeader);
                  } catch (CmsDataAccessException var150) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}), var150);
                     }

                     throw var150;
                  }

                  try {
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).updateRelations(remoteDbc, remoteOnlineProject, localFileHeader);
                  } catch (CmsDataAccessException var149) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FILE_1", new Object[]{localFileHeader.toString()}), var149);
                     }

                     throw var149;
                  }

                  try {
                     localProperties = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readPropertyObjects(dbc, localOnlineProject, localFileHeader);
                     CmsProperty.setAutoCreatePropertyDefinitions(localProperties, true);
                     CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).writePropertyObjects(remoteDbc, remoteOnlineProject, newFile, localProperties);
                  } catch (CmsDataAccessException var148) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_PROPERTIES_1", new Object[]{newFile.toString()}), var148);
                     }

                     throw var148;
                  }

                  try {
                     CmsReplicationManager.getUserDriver(this.getDriverManager(), remoteDbc).publishAccessControlEntries(remoteDbc, localOnlineProject, remoteOnlineProject, localFileHeader.getResourceId(), newFile.getResourceId());
                  } catch (CmsDataAccessException var147) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_ACLS_1", new Object[]{newFile.toString()}), var147);
                     }

                     throw var147;
                  }

                  try {
                     newFile.setState(CmsResource.STATE_NEW);
                     CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(newFile, publishedFile.getPublishTag()));
                  } catch (CmsDataAccessException var145) {
                     if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                        oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FILE_HISTORY_1", new Object[]{newFile.toString()}), var145);
                     }

                     throw var145;
                  } finally {
                     newFile.setState(CmsResource.STATE_UNCHANGED);
                  }
               }
            }

            if (localFileHeader != null) {
               this.addReplicationHistory(localFileHeader.getRootPath(), state, localFileHeader.getUserLastModified(), localFileHeader.getDateLastModified());
            } else if (remoteFileHeader != null) {
               this.addReplicationHistory(remoteFileHeader.getRootPath(), state, remoteFileHeader.getUserLastModified(), remoteFileHeader.getDateLastModified());
            } else {
               this.addReplicationHistory(publishedFile.getRootPath(), state, (CmsUUID)null, 0L);
            }

            report.println(org.opencms.report.Messages.get().container("RPT_OK_0"), 4);
         } catch (CmsDataAccessException var168) {
            CmsMessageContainer message = Messages.get().container("ERR_ERROR_REPLICATING_VFS_RESOURCE_2", publishedFile.getRootPath(), server.getName());
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(message.key(), var168);
            }

            remoteDbc.report(report, message, var168);
         }

      } finally {
         remoteDbc.clear();
      }
   }

   protected void replicateFolder(CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, CmsProject localOnlineProject, CmsUUID publishHistoryId, CmsPublishedResource publishedFolder) throws CmsException {
      CmsFolder localFolder = null;
      List localProperties = null;
      CmsResource remoteFolder = null;
      CmsResource newFolder = null;
      CmsDbContext remoteDbc = server.getDbContext(dbc.getRequestContext());
      CmsProject remoteOnlineProject = server.getReplicationProject();

      try {
         localFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readFolder(dbc, localOnlineProject.getUuid(), publishedFolder.getRootPath());
         this.replicateParent(dbc, remoteDbc, report, server, localOnlineProject, publishHistoryId, publishedFolder);
         CmsResourceState state = publishedFolder.getState();
         if (state.isChanged()) {
            try {
               CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), localFolder.getRootPath());
            } catch (CmsException var77) {
               state = CmsResource.STATE_NEW;
            }
         } else if (state.isNew()) {
            try {
               CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), publishedFolder.getRootPath());
               state = CmsResource.STATE_CHANGED;
            } catch (CmsDataAccessException var76) {
            }
         }

         report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
         report.print(Messages.get().container("RPT_REPLICATE_0"), 3);
         report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", publishedFolder.getRootPath()));
         report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));
         if (state.isNew()) {
            try {
               newFolder = (CmsFolder)localFolder.clone();
               newFolder.setState(CmsResource.STATE_UNCHANGED);
               remoteFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).createResource(remoteDbc, remoteOnlineProject.getUuid(), newFolder, (byte[])null);
            } catch (CmsVfsResourceNotFoundException var90) {
               try {
                  remoteFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), localFolder.getRootPath());
                  CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).publishResource(remoteDbc, remoteOnlineProject, (CmsResource)remoteFolder, localFolder);
               } catch (CmsDataAccessException var89) {
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_READING_FOLDER_1", new Object[]{localFolder.toString()}), var90);
                  }

                  throw var89;
               }
            } catch (CmsDataAccessException var91) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FOLDER_1", new Object[]{localFolder.toString()}), var91);
               }

               throw var91;
            }

            if (newFolder == null) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FOLDER_1", new Object[]{localFolder.toString()}));
               }

               return;
            }

            try {
               newFolder.setState(CmsResource.STATE_NEW);
               CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource(newFolder, publishedFolder.getPublishTag()));
            } catch (CmsDataAccessException var87) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FOLDER_HISTORY_1", new Object[]{localFolder.toString()}), var87);
               }

               throw var87;
            } finally {
               newFolder.setState(CmsResource.STATE_UNCHANGED);
            }
         } else if (state.isChanged()) {
            try {
               remoteFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), localFolder.getRootPath());
            } catch (CmsVfsResourceNotFoundException var85) {
               try {
                  remoteFolder = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).createResource(remoteDbc, remoteOnlineProject.getUuid(), localFolder, (byte[])null);
                  ((CmsResource)remoteFolder).setState(CmsResource.STATE_UNCHANGED);
                  CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).writeResourceState(remoteDbc, localOnlineProject, (CmsResource)remoteFolder, 3, true);
               } catch (CmsDataAccessException var84) {
                  if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                     oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FOLDER_1", new Object[]{localFolder.toString()}), var85);
                  }

                  throw var84;
               }
            } catch (CmsDataAccessException var86) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_READING_FOLDER_1", new Object[]{localFolder.toString()}), var86);
               }

               throw var86;
            }

            try {
               ((CmsResource)remoteFolder).setState(CmsResource.STATE_CHANGED);
               CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).writePublishHistory(remoteDbc, publishHistoryId, new CmsPublishedResource((CmsResource)remoteFolder, publishedFolder.getPublishTag()));
            } catch (CmsDataAccessException var82) {
               if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
                  oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_DELETING_FOLDER_PROPERTIES_1", new Object[]{localFolder.toString()}), var82);
               }

               throw var82;
            } finally {
               ((CmsResource)remoteFolder).setState(CmsResource.STATE_UNCHANGED);
            }
         }

         if (remoteFolder == null) {
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_CREATING_FOLDER_1", new Object[]{localFolder.toString()}));
            }

            return;
         }

         try {
            CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).publishResource(remoteDbc, remoteOnlineProject, (CmsResource)remoteFolder, localFolder);
         } catch (CmsDataAccessException var81) {
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_UPDATING_FOLDER_1", new Object[]{localFolder.toString()}), var81);
            }

            throw var81;
         }

         try {
            CmsReplicationManager.getUserDriver(this.getDriverManager(), remoteDbc).publishAccessControlEntries(remoteDbc, localOnlineProject, remoteOnlineProject, localFolder.getResourceId(), ((CmsResource)remoteFolder).getResourceId());
         } catch (CmsDataAccessException var80) {
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FOLDER_ACLS_1", new Object[]{localFolder.toString()}), var80);
            }

            throw var80;
         }

         try {
            CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).deletePropertyObjects(remoteDbc, remoteOnlineProject.getUuid(), (CmsResource)remoteFolder, 1);
            localProperties = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readPropertyObjects(dbc, localOnlineProject, localFolder);
            CmsProperty.setAutoCreatePropertyDefinitions(localProperties, true);
            CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).writePropertyObjects(remoteDbc, remoteOnlineProject, (CmsResource)remoteFolder, localProperties);
         } catch (CmsDataAccessException var79) {
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_WRITING_FOLDER_PROPERTIES_1", new Object[]{localFolder.toString()}), var79);
            }

            throw var79;
         }

         try {
            CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).updateRelations(remoteDbc, remoteOnlineProject, (CmsResource)remoteFolder);
         } catch (CmsDataAccessException var78) {
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(Messages.get().getBundle().key("ERR_UPDATING_FOLDER_1", new Object[]{localFolder.toString()}), var78);
            }

            throw var78;
         }

         this.addReplicationHistory(localFolder.getRootPath(), state, localFolder.getUserLastModified(), localFolder.getDateLastModified());
         report.println(org.opencms.report.Messages.get().container("RPT_OK_0"), 4);
      } catch (CmsDataAccessException var92) {
         CmsMessageContainer message = Messages.get().container("ERR_ERROR_REPLICATING_VFS_RESOURCE_2", publishedFolder.getRootPath(), server.getName());
         if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isErrorEnabled()) {
            oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(message.key(), var92);
         }

         remoteDbc.report(report, message, var92);
      } finally {
         remoteDbc.clear();
      }

   }

   protected void replicateParent(CmsDbContext dbc, CmsDbContext remoteDbc, I_CmsReport report, CmsReplicationServer server, CmsProject localOnlineProject, CmsUUID publishHistoryId, CmsPublishedResource publishedFolder) throws CmsException {
      if (!publishedFolder.getRootPath().equals("/")) {
         CmsProject remoteOnlineProject = server.getReplicationProject();
         String parentFolderName = CmsResource.getParentFolder(publishedFolder.getRootPath());
         boolean missingParentFolder = false;

         CmsFolder localParent;
         try {
            localParent = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readFolder(remoteDbc, remoteOnlineProject.getUuid(), parentFolderName);
            if (localParent.getState().isDeleted()) {
               missingParentFolder = true;
            }
         } catch (CmsVfsResourceNotFoundException var14) {
            missingParentFolder = true;
         }

         if (missingParentFolder) {
            localParent = null;

            try {
               localParent = CmsReplicationManager.getVfsDriver(this.getDriverManager(), dbc).readFolder(dbc, localOnlineProject.getUuid(), parentFolderName);
               localParent.setState(CmsResource.STATE_NEW);
               CmsPublishedResource publishedParent = new CmsPublishedResource(localParent, CmsReplicationManager.getHistoryDriver(this.getDriverManager(), dbc).readNextPublishTag(dbc));
               ++this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper;
               this.replicateFolder(dbc, report, server, localOnlineProject, publishHistoryId, publishedParent);
            } catch (CmsException var13) {
            }
         }

      }
   }

   protected void replicateProject(CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, CmsUUID projectId) throws CmsDataAccessException {
      CmsProject localProject = null;
      List projectResources = null;
      String currentProjectResource = null;
      CmsDbContext remoteDbc = null;

      try {
         remoteDbc = CmsReplicationServer.getDbContext(dbc.getRequestContext(), server.getReplicationProject());
         localProject = this.getDriverManager().readProject(dbc, projectId);
         report.print(org.opencms.report.Messages.get().container("RPT_SUCCESSION_1", server.getName()), 3);
         report.print(Messages.get().container("RPT_REPLICATE_PROJECT_0"), 3);
         report.print(org.opencms.report.Messages.get().container("RPT_ARGUMENT_1", localProject.getName()));
         report.print(org.opencms.report.Messages.get().container("RPT_DOTS_0"));
         CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).createProject(remoteDbc, localProject.getUuid(), CmsReplicationManager.getUserDriver(this.getDriverManager(), dbc).readUser(dbc, localProject.getOwnerId()), CmsReplicationManager.getUserDriver(this.getDriverManager(), dbc).readGroup(dbc, localProject.getGroupId()), CmsReplicationManager.getUserDriver(this.getDriverManager(), dbc).readGroup(dbc, localProject.getManagerGroupId()), localProject.getName(), localProject.getDescription(), localProject.getFlags(), localProject.getType());
         projectResources = CmsReplicationManager.getProjectDriver(this.getDriverManager(), dbc).readProjectResources(dbc, localProject);
         Iterator i = projectResources.iterator();

         while(i.hasNext()) {
            currentProjectResource = (String)i.next();
            CmsReplicationManager.getProjectDriver(this.getDriverManager(), remoteDbc).createProjectResource(remoteDbc, localProject.getUuid(), currentProjectResource);
         }

         report.println(org.opencms.report.Messages.get().container("RPT_OK_0"), 4);
      } catch (CmsDataAccessException var15) {
         CmsMessageContainer message = Messages.get().container("ERR_REPLICATING_PROJECT_2", localProject == null ? "" + projectId : localProject.getName(), server.getName());
         oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(message.key(), var15);
         throw new CmsReplicationException(message, var15);
      } finally {
         if (remoteDbc != null) {
            remoteDbc.clear();
         }

      }
   }

   protected void replicateVfsResources(CmsDbContext dbc, I_CmsReport report, CmsReplicationServer server, CmsUUID publishHistoryId, List publishedResources) throws CmsException {
      Map publishedFolders = new HashMap();
      Map deletedFolders = new HashMap();
      List publishedFiles = new ArrayList();
      List deletedFiles = new ArrayList();
      Set replicatedResourceIds = new HashSet();
      ArrayList replicatedFilesCollect = new ArrayList();

      try {
         if (!publishedResources.isEmpty()) {
            List pubRes = new ArrayList(publishedResources);
            Collections.sort(pubRes, CmsReplicationManager.PUBRES_COMPARATOR);
            Iterator itPubRes = pubRes.iterator();

            while(itPubRes.hasNext()) {
               CmsPublishedResource publishedResource = (CmsPublishedResource)itPubRes.next();
               if (publishedResource.isFolder()) {
                  if (publishedResource.getState().isDeleted()) {
                     deletedFolders.put(publishedResource.getRootPath(), publishedResource);
                  } else {
                     publishedFolders.put(publishedResource.getRootPath(), publishedResource);
                  }
               } else if (publishedResource.getState().isDeleted()) {
                  deletedFiles.add(publishedResource);
               } else {
                  publishedFiles.add(publishedResource);
               }
            }

            CmsProject localOnlineProject = server.getOrgReplicationProject();
            this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper = publishedFolders.size() + deletedFolders.size();
            this.öO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringsuper = publishedFiles.size();
            Iterator it = CmsReplicationManager.getInstance().getConfiguration().getReplicationOrder().iterator();

            while(it.hasNext()) {
               String orderFilter = (String)it.next();
               report.println(Messages.get().container("RPT_REPLICATE_ORDER_BEGIN_1", orderFilter), 2);
               List filteredDeletedFiles = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super((List)deletedFiles, orderFilter);
               if (filteredDeletedFiles.size() > 0) {
                  report.println(Messages.get().container("RPT_REPLICATE_DELETED_FILES_BEGIN_0"), 2);
                  Iterator itDeletedFiles = filteredDeletedFiles.iterator();

                  while(itDeletedFiles.hasNext()) {
                     CmsPublishedResource publishedResource = (CmsPublishedResource)itDeletedFiles.next();
                     this.replicateFile(CmsReplicationServer.getDbContext(dbc.getRequestContext(), localOnlineProject), report, server, localOnlineProject, publishHistoryId, publishedResource, replicatedResourceIds);
                     replicatedFilesCollect.add(publishedResource);
                  }

                  report.println(Messages.get().container("RPT_REPLICATE_DELETED_FILES_END_0"), 2);
               }

               Map filteredDeletedFolders = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super((Map)deletedFolders, orderFilter);
               if (filteredDeletedFolders.size() > 0) {
                  List folderNames = new ArrayList();
                  folderNames.addAll(filteredDeletedFolders.keySet());
                  Collections.sort(folderNames);
                  Collections.reverse(folderNames);
                  report.println(Messages.get().container("RPT_REPLICATE_DELETED_FOLDERS_BEGIN_0"), 2);
                  Iterator itFolderNames = folderNames.iterator();

                  while(itFolderNames.hasNext()) {
                     CmsPublishedResource publishedResource = (CmsPublishedResource)filteredDeletedFolders.get(itFolderNames.next());
                     this.replicateDeletedFolder(dbc.getRequestContext(), report, server, publishHistoryId, publishedResource);
                     replicatedFilesCollect.add(publishedResource);
                  }

                  report.println(Messages.get().container("RPT_REPLICATE_DELETED_FOLDERS_END_0"), 2);
               }

               Map filteredPublishedFolders = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super((Map)publishedFolders, orderFilter);
               CmsPublishedResource publishedResource;
               Iterator itPubFiles;
               if (filteredPublishedFolders.size() > 0) {
                  List folderNames = new ArrayList();
                  folderNames.addAll(filteredPublishedFolders.keySet());
                  Collections.sort(folderNames);
                  report.println(Messages.get().container("RPT_REPLICATE_FOLDERS_BEGIN_0"), 2);
                  itPubFiles = folderNames.iterator();

                  while(itPubFiles.hasNext()) {
                     publishedResource = (CmsPublishedResource)filteredPublishedFolders.get(itPubFiles.next());
                     this.replicateFolder(CmsReplicationServer.getDbContext(dbc.getRequestContext(), localOnlineProject), report, server, localOnlineProject, publishHistoryId, publishedResource);
                     replicatedFilesCollect.add(publishedResource);
                  }

                  report.println(Messages.get().container("RPT_REPLICATE_FOLDERS_END_0"), 2);
               }

               List filteredPublishedFiles = this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super((List)publishedFiles, orderFilter);
               if (filteredPublishedFiles.size() > 0) {
                  report.println(Messages.get().container("RPT_REPLICATE_FILES_BEGIN_0"), 2);
                  itPubFiles = filteredPublishedFiles.iterator();

                  while(itPubFiles.hasNext()) {
                     publishedResource = (CmsPublishedResource)itPubFiles.next();
                     this.replicateFile(CmsReplicationServer.getDbContext(dbc.getRequestContext(), localOnlineProject), report, server, localOnlineProject, publishHistoryId, publishedResource, replicatedResourceIds);
                     replicatedFilesCollect.add(publishedResource);
                  }

                  report.println(Messages.get().container("RPT_REPLICATE_FILES_END_0"), 2);
               }
            }

            return;
         }
      } catch (CmsDataAccessException var49) {
         CmsMessageContainer message = Messages.get().container("ERR_ERROR_REPLICATING_VFS_RESOURCE_1", server.getName());
         oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.error(message.key(), var49);
         throw new CmsReplicationException(message, var49);
      } finally {
         if (CmsOceeManager.getInstance().checkCoreVersion("7.0.2")) {
            CmsDbContext pubDbc = CmsReplicationServer.getDbContext(dbc.getRequestContext(), server.getOrgReplicationProject());

            try {
               CmsReplicationManager.getVfsDriver(this.getDriverManager(), pubDbc).publishVersions(pubDbc, (CmsResource)null, false);
            } finally {
               pubDbc.clear();
            }
         }

         if (publishedFiles.size() + publishedFolders.size() + deletedFolders.size() > 0) {
            Object[] arguments = new Object[]{new Integer(publishedFiles.size()), new Integer(publishedFolders.size()), new Integer(deletedFolders.size()), report.formatRuntime()};
            CmsMessageContainer message = Messages.get().container("RPT_REPLICATION_STAT_4", arguments);
            if (oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.isInfoEnabled()) {
               oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper.info(message.key());
            }

            report.println(message);
         }

         publishedResources.clear();
         publishedResources.addAll(replicatedFilesCollect);
      }

   }

   protected List retrieveRemoteVfsToDelete(CmsRequestContext requestContext, I_CmsReport report, CmsReplicationServer server, List resourceNames) {
      CmsDbContext remoteDbc = server.getDbContext(requestContext);
      HashMap ret = new HashMap();

      try {
         Iterator it = resourceNames.iterator();

         while(it.hasNext()) {
            String rootPath = (String)it.next();

            try {
               CmsResource rootResource = CmsReplicationManager.getVfsDriver(this.getDriverManager(), remoteDbc).readResource(remoteDbc, server.getReplicationProject().getUuid(), rootPath, true);
               List resources = new ArrayList();
               if (rootResource.isFolder()) {
                  resources.addAll(server.getServerResources(requestContext, rootPath));
               }

               resources.add(rootResource);
               Iterator itResources = resources.iterator();

               while(itResources.hasNext()) {
                  CmsResource resource = (CmsResource)itResources.next();
                  if (resource.isFolder()) {
                     report.println(Messages.get().container("RPT_CHECKING_1", resource.getRootPath()));
                  }

                  int backupTagId = CmsReplicationManager.getHistoryDriver(this.getDriverManager(), remoteDbc).readMaxPublishTag(remoteDbc, resource.getResourceId());
                  ret.put(resource.getRootPath(), new CmsPublishedResource(resource.getStructureId(), resource.getResourceId(), backupTagId, resource.getRootPath(), resource.getTypeId(), resource.isFolder(), CmsResource.STATE_DELETED, resource.getSiblingCount()));
               }
            } catch (CmsException var18) {
            }
         }
      } finally {
         remoteDbc.clear();
      }

      ArrayList retList = new ArrayList(ret.values());
      Collections.sort(retList, CmsReplicationManager.PUBRES_COMPARATOR);
      return retList;
   }

   private List o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(List resources, String orderFilter) {
      List result = new ArrayList();
      Iterator it = resources.iterator();

      while(true) {
         CmsPublishedResource pubRes;
         do {
            if (!it.hasNext()) {
               return result;
            }

            pubRes = (CmsPublishedResource)it.next();
         } while(!pubRes.getRootPath().startsWith(orderFilter) && !orderFilter.startsWith(pubRes.getRootPath()));

         result.add(pubRes);
         it.remove();
      }
   }

   private Map o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(Map resourceMap, String orderFilter) {
      Map result = new HashMap();
      Iterator it = resourceMap.entrySet().iterator();

      while(true) {
         CmsPublishedResource pubRes;
         do {
            if (!it.hasNext()) {
               return result;
            }

            Entry entry = (Entry)it.next();
            pubRes = (CmsPublishedResource)entry.getValue();
         } while(!pubRes.getRootPath().startsWith(orderFilter) && !orderFilter.startsWith(pubRes.getRootPath()));

         result.put(pubRes.getRootPath(), pubRes);
         it.remove();
      }
   }
}
