package org.opencms.ocee.replication;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.digester3.Digester;
import org.dom4j.Element;
import org.opencms.configuration.A_CmsXmlConfiguration;
import org.opencms.db.CmsDriverManager;
import org.opencms.db.CmsSqlManager;
import org.opencms.db.I_CmsHistoryDriver;
import org.opencms.db.I_CmsProjectDriver;
import org.opencms.db.I_CmsUserDriver;
import org.opencms.db.I_CmsVfsDriver;
import org.opencms.main.CmsCoreProvider;
import org.opencms.main.CmsLog;
import org.opencms.ocee.base.CmsOceeManager;
import org.opencms.ocee.cluster.CmsClusterManager;
import org.opencms.util.CmsStringUtil;
import org.opencms.util.CmsUUID;

public class CmsReplicationConfiguration extends A_CmsXmlConfiguration {
   private static final String Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = "mode";
   private static final String Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = "sqlmanager";
   private static final String øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interfacesuper = "org/opencms/ocee/replication/";
   private static final String ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000if = "ocee-replication.dtd";
   private static final String öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000privatesuper = "http://www.alkacon.com/dtd/6.0/";
   private static final String oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidsuper = "ocee-replication.xml";
   private static final String Öo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000forsuper = "class";
   private static final String øO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000classsuper = "date";
   private static final String ÔÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000privatenew = "description";
   private static final String ÓÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicnew = "destination";
   private static final String ÒÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000whilenew = "detail";
   private static final String Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = "details";
   private static final String øÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000floatnew = "drivers";
   private static final String Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void = "duration";
   private static final String ØO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000supersuper = "exportfolder";
   private static final String ÖÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000returnnew = "group";
   private static final String Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = "groups";
   private static final String õÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intnew = "handler";
   private static final String OÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thisnew = "handlers";
   private static final String ÖÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thisObject = "history";
   private static final String ØÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000voidnew = "managersgroup";
   private static final String ÕÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interfacenew = "orgunit";
   private static final String oÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000supernew = "orgunits";
   private static final String ôÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000nullnew = "origin";
   private static final String öÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ifnew = "poolurl";
   private static final String ÕÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000classnew = "project";
   private static final String ÖO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000thissuper = "replication";
   private static final String öO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringsuper = "replicationorder";
   private static final String Oo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000returnsuper = "replicationsource";
   private static final String OÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fornew = "replicationsources";
   private static final String oO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000do = "resources";
   private static final String ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000whilesuper = "server";
   private static final String ÓO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000public = "serverid";
   private static final String Ôo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ifsuper = "server-name";
   private static final String ÒÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newnew = "servers";
   private static final String OO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000for = "source";
   private static final String oÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000donew = "sources";
   private static final String ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000null = "stats";
   private static final String ÔÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Stringnew = "synchronization";
   private static final String Óo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000intsuper = "user";
   private static final String ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000float = "username";
   private static final String ÔO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000private = "userreplication";
   private static final String Òo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000nullsuper = "userreplications";
   private static final String õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000int = "vfs";
   private static final String Õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000floatsuper = "vfsreplicationnotification";
   private List õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper;
   private String o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   private String ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while;
   private List ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew;
   private List ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface;
   private Map ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject;
   private Map Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;
   private Map ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper;
   private I_CmsReplicationUserSynchronization õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper;
   private Map Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper;

   public CmsReplicationConfiguration() {
      this.setXmlFileName("ocee-replication.xml");
      this.ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject = new HashMap();
      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = new HashMap();
      this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew = new ArrayList();
      this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper = new HashMap();
   }

   public void addHandler(String handlerClassName) {
      try {
         I_CmsReplicationHandler handler = (I_CmsReplicationHandler)Class.forName(handlerClassName).newInstance();
         this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew.add(handler);
         if (CmsLog.INIT.isInfoEnabled()) {
            CmsLog.INIT.info(Messages.get().getBundle().key("INIT_REPLICATION_HANDLER_CONFIGURED_1", new Object[]{handlerClassName}));
         }
      } catch (Exception var3) {
         if (CmsLog.INIT.isErrorEnabled()) {
            CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_HANDLER_ERROR_1", new Object[]{handlerClassName}));
         }
      }

   }

   public void addReplicationSource(Object name, Object resources) {
      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.put(name, resources);
   }

   public void addServer(CmsReplicationServer server) {
      if (server.getServerId() == null) {
         server.setServerId((new CmsUUID()).toString());
      }

      Iterator it = this.ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject.values().iterator();

      while(it.hasNext()) {
         CmsReplicationServer s = (CmsReplicationServer)it.next();
         if (s.getName().equals(server.getName())) {
            it.remove();
            if (CmsLog.INIT.isErrorEnabled()) {
               CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_SERVER_NAME_INVALID_1", new Object[]{server.toString()}));
            }
         } else if (s.getServerId().equals(server.getServerId())) {
            it.remove();
            if (CmsLog.INIT.isErrorEnabled()) {
               CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_SERVER_ID_INVALID_1", new Object[]{server.toString()}));
            }
         }
      }

      this.ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject.put(server.getServerId(), server);
      if (CmsLog.INIT.isInfoEnabled()) {
         CmsLog.INIT.info(Messages.get().getBundle().key("INIT_REPLICATION_SERVER_CONFIGURED_1", new Object[]{server.toString()}));
      }

   }

   public void addStatistics(CmsReplicationStatistics stats) {
      I_CmsReplicationHandler handler = (I_CmsReplicationHandler)this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew.get(this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew.size() - 1);
      handler.setStatistics(stats);
   }

   public void addUserReplication(CmsReplicationUserSettings settings) {
      if (!settings.isNamed()) {
         settings.createName();
      }

      this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.put(settings.getName(), settings);
      if (CmsLog.INIT.isInfoEnabled()) {
         CmsLog.INIT.info(Messages.get().getBundle().key("INIT_REPLICATION_USER_CONFIGURED_1", new Object[]{settings.toString()}));
      }

   }

   public void addXmlDigesterRules(Digester digester) {
      digester.addCallMethod("*/replication", "initConfiguration");
      digester.addCallMethod("*/replication/managersgroup", "setManagersGroup", 0);
      digester.addCallMethod("*/replication/handlers/handler/class", "addHandler", 0);
      String xpathStats = "*/replication/handlers/handler/stats";
      digester.addObjectCreate(xpathStats, CmsReplicationStatistics.class);
      digester.addBeanPropertySetter(xpathStats + "/" + "date", "date");
      digester.addBeanPropertySetter(xpathStats + "/" + "duration", "duration");
      digester.addBeanPropertySetter(xpathStats + "/" + "username", "userName");
      digester.addCallMethod(xpathStats + "/" + "details" + "/" + "detail", "setDetail", 2);
      digester.addCallParam(xpathStats + "/" + "details" + "/" + "detail", 0, "key");
      digester.addCallParam(xpathStats + "/" + "details" + "/" + "detail", 1);
      digester.addSetNext(xpathStats, "addStatistics");
      String xPathServer = "*/replication/servers/server";
      digester.addObjectCreate(xPathServer, CmsReplicationServer.class);
      digester.addBeanPropertySetter(xPathServer + "/" + "name", "name");
      digester.addBeanPropertySetter(xPathServer + "/" + "poolurl", "destServerPoolUrl");
      digester.addBeanPropertySetter(xPathServer + "/" + "description", "description");
      digester.addCallMethod(xPathServer + "/" + "serverid", "setServerId", 0);
      digester.addBeanPropertySetter(xPathServer + "/" + "origin" + "/" + "server-name", "orgServerName");
      digester.addBeanPropertySetter(xPathServer + "/" + "origin" + "/" + "poolurl", "orgServerPoolUrl");
      digester.addBeanPropertySetter(xPathServer + "/" + "destination" + "/" + "server-name", "destServerName");
      digester.addBeanPropertySetter(xPathServer + "/" + "destination" + "/" + "poolurl", "destServerPoolUrl");
      digester.addCallMethod(xPathServer + "/" + "vfsreplicationnotification" + "/" + "class", "setReplicationNotifier", 0);
      String driversPath = xPathServer + "/" + "drivers";
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(digester, driversPath + "/" + "project", "initProjectDriver");
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(digester, driversPath + "/" + "history", "initHistoryDriver");
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(digester, driversPath + "/" + "vfs", "initVfsDriver");
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(digester, driversPath + "/" + "user", "initUserDriver");
      digester.addCallMethod(xPathServer, "setMode", 1);
      digester.addCallParam(xPathServer, 0, "mode");
      digester.addCallMethod(xPathServer + "/" + "sources" + "/" + "source", "addSourceName", 0);
      digester.addSetNext(xPathServer, "addServer");
      String xPathReplicationSources = "*/replication/replicationsources";
      String xPathResources = xPathReplicationSources + "/" + "replicationsource" + "/" + "resources";
      digester.addObjectCreate(xPathResources, ArrayList.class);
      digester.addCallMethod(xPathResources + "/" + "resource", "add", 0);
      digester.addCallMethod(xPathReplicationSources + "/" + "replicationsource", "addReplicationSource", 2);
      digester.addCallParam(xPathReplicationSources + "/" + "replicationsource" + "/" + "name", 0);
      digester.addCallParam(xPathResources, 1, true);
      String xPathSynchronization = "*/replication/userreplications/synchronization";
      digester.addCallMethod(xPathSynchronization, "setUserSynchronizationClass", 1);
      digester.addCallParam(xPathSynchronization, 0, "class");
      String xPathUser = "*/replication/userreplications/userreplication";
      digester.addObjectCreate(xPathUser, CmsReplicationUserSettings.class);
      digester.addBeanPropertySetter(xPathUser + "/@" + "name", "name");
      digester.addBeanPropertySetter(xPathUser + "/" + "server-name", "serverName");
      digester.addBeanPropertySetter(xPathUser + "/" + "poolurl", "poolUrl");
      digester.addCallMethod(xPathUser + "/" + "orgunits" + "/" + "orgunit", "addOrgUnit", 0);
      digester.addCallMethod(xPathUser + "/" + "groups" + "/" + "group", "addGroup", 0);
      digester.addSetNext(xPathUser, "addUserReplication");
      digester.addCallMethod("*/replication/exportfolder", "setExportFolder", 0);
      String xPathOrder = "*/replication/replicationorder";
      digester.addObjectCreate(xPathOrder, ArrayList.class);
      digester.addCallMethod(xPathOrder + "/" + "resource", "add", 0);
      digester.addSetNext(xPathOrder, "setReplicationOrder");
   }

   public Element generateXml(Element parent) {
      Element replicationElement = parent.addElement("replication");
      if (this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while != null) {
         replicationElement.addElement("managersgroup").addText(this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while.toString());
      }

      Element replicationHandlersElement = replicationElement.addElement("handlers");
      Iterator itHandlers = this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew.iterator();

      while(true) {
         I_CmsReplicationHandler handler;
         Element handlerElement;
         Element replicationSourcesElement;
         Element serverElement;
         Element sourcesElement;
         do {
            if (!itHandlers.hasNext()) {
               Element replicationServersElement = replicationElement.addElement("servers");
               Iterator i = this.ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject.values().iterator();

               Element userReplicationsElement;
               Element destElement;
               Element userReplicationElement;
               List sources;
               int j;
               while(i.hasNext()) {
                  CmsReplicationServer server = (CmsReplicationServer)i.next();
                  serverElement = replicationServersElement.addElement("server").addAttribute("mode", server.getMode().toString());
                  serverElement.addElement("name").addText(server.getName());
                  if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(server.getDescription())) {
                     serverElement.addElement("description").addText(server.getDescription());
                  }

                  if (server.getServerId() != null) {
                     serverElement.addElement("serverid").addText(server.getServerId().toString());
                  }

                  userReplicationsElement = serverElement.addElement("origin");
                  userReplicationsElement.addElement("server-name").addText(server.getOrgServerName());
                  userReplicationsElement.addElement("poolurl").addText(server.getOrgServerPoolUrl());
                  destElement = serverElement.addElement("destination");
                  destElement.addElement("server-name").addText(server.getDestServerName());
                  destElement.addElement("poolurl").addText(server.getDestServerPoolUrl());
                  if (server.hasReplicationNotifier()) {
                     userReplicationElement = serverElement.addElement("vfsreplicationnotification");
                     sourcesElement = userReplicationElement.addElement("class");
                     sourcesElement.addText(server.getReplicationNotifier().getClass().getName());
                  }

                  if (server.hasDrivers()) {
                     userReplicationElement = serverElement.addElement("drivers");
                     I_CmsHistoryDriver historyDriver = server.getHistoryDriver();
                     this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(userReplicationElement, "history", historyDriver, historyDriver.getSqlManager());
                     I_CmsProjectDriver projectDriver = server.getProjectDriver();
                     this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(userReplicationElement, "project", projectDriver, projectDriver.getSqlManager());
                     I_CmsUserDriver userDriver = server.getUserDriver();
                     this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(userReplicationElement, "user", userDriver, userDriver.getSqlManager());
                     I_CmsVfsDriver vfsDriver = server.getVfsDriver();
                     this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(userReplicationElement, "vfs", vfsDriver, vfsDriver.getSqlManager());
                  }

                  sources = server.getSources();
                  sourcesElement = serverElement.addElement("sources");

                  for(j = 0; j < sources.size(); ++j) {
                     sourcesElement.addElement("source").addText((String)sources.get(j));
                  }
               }

               replicationSourcesElement = replicationElement.addElement("replicationsources");
               Iterator k = this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.keySet().iterator();

               while(k.hasNext()) {
                  String sourceName = (String)k.next();
                  destElement = replicationSourcesElement.addElement("replicationsource");
                  destElement.addElement("name").addText(sourceName);
                  sources = (List)this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return.get(sourceName);
                  sourcesElement = destElement.addElement("resources");

                  for(j = 0; j < sources.size(); ++j) {
                     sourcesElement.addElement("resource").addText((String)sources.get(j));
                  }
               }

               if (this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super != null) {
                  replicationElement.addElement("exportfolder").addText(this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.toString());
               }

               Iterator l;
               if (this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper != null) {
                  userReplicationsElement = replicationElement.addElement("replicationorder");
                  l = this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper.iterator();

                  while(l.hasNext()) {
                     userReplicationsElement.addElement("resource").addText((String)l.next());
                  }
               }

               if (!this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.isEmpty()) {
                  userReplicationsElement = replicationElement.addElement("userreplications");
                  userReplicationsElement.addElement("synchronization").addAttribute("class", this.getUserSynchronizationHandler().getClass().getName());
                  l = this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.values().iterator();

                  while(true) {
                     List groups;
                     do {
                        if (!l.hasNext()) {
                           return replicationElement;
                        }

                        userReplicationElement = userReplicationsElement.addElement("userreplication");
                        CmsReplicationUserSettings settings = (CmsReplicationUserSettings)l.next();
                        if (settings.isNamed()) {
                           userReplicationElement.addAttribute("name", settings.getName());
                        }

                        userReplicationElement.addElement("server-name").addText(settings.getServerName());
                        userReplicationElement.addElement("poolurl").addText(settings.getPoolUrl());
                        List orgUnits = settings.getOrgUnits();
                        if (!orgUnits.isEmpty()) {
                           Element orgUnitsElement = userReplicationElement.addElement("orgunits");

                           for(int m = 0; m < orgUnits.size(); ++m) {
                              orgUnitsElement.addElement("orgunit").addText((String)orgUnits.get(m));
                           }
                        }

                        groups = settings.getGroups();
                     } while(groups.isEmpty());

                     Element groupsElement = userReplicationElement.addElement("groups");

                     for(int m = 0; m < groups.size(); ++m) {
                        groupsElement.addElement("group").addText((String)groups.get(m));
                     }
                  }
               }

               return replicationElement;
            }

            handler = (I_CmsReplicationHandler)itHandlers.next();
            handlerElement = replicationHandlersElement.addElement("handler");
            handlerElement.addElement("class").addText(handler.getClass().getName());
         } while(handler.getStatistics() == null);

         replicationSourcesElement = handlerElement.addElement("stats");
         replicationSourcesElement.addElement("date").addText(Long.toString(handler.getStatistics().getDate()));
         replicationSourcesElement.addElement("duration").addText(Long.toString(handler.getStatistics().getDuration()));
         replicationSourcesElement.addElement("username").addText(handler.getStatistics().getUserName());
         serverElement = replicationSourcesElement.addElement("details");
         Iterator itDetails = handler.getStatistics().getDetailKeys().iterator();

         while(itDetails.hasNext()) {
            String key = itDetails.next().toString();
            String value = handler.getStatistics().getDetails(key);
            sourcesElement = serverElement.addElement("detail");
            sourcesElement.addAttribute("key", key);
            sourcesElement.addText(value);
         }
      }
   }

   public String getDtdFilename() {
      return "ocee-replication.dtd";
   }

   public String getDtdSystemLocation() {
      return "org/opencms/ocee/replication/";
   }

   public String getDtdUrlPrefix() {
      return "http://www.alkacon.com/dtd/6.0/";
   }

   public String getExportFolder() {
      return this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super != null && !this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.endsWith("/") ? this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super + "/" : this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;
   }

   public String getManagersGroup() {
      return this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while;
   }

   public List getReplicationHandlers() {
      return Collections.unmodifiableList(this.ÓÒ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectnew);
   }

   public List getReplicationOrder() {
      return this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface;
   }

   public CmsReplicationServer getReplicationServer(CmsUUID serverId) {
      return (CmsReplicationServer)this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.get(serverId);
   }

   public CmsReplicationServer getReplicationServerByDestServerName(String name) {
      Iterator iter = this.getReplicationServersAsList().iterator();

      CmsReplicationServer server;
      do {
         if (!iter.hasNext()) {
            return null;
         }

         server = (CmsReplicationServer)iter.next();
      } while(!server.getDestServerName().equals(name));

      return server;
   }

   public Map getReplicationServers() {
      return Collections.unmodifiableMap(this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper);
   }

   public List getReplicationServersAsList() {
      return Collections.unmodifiableList(new ArrayList(this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.values()));
   }

   public Map getReplicationSources() {
      return Collections.unmodifiableMap(this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return);
   }

   public CmsReplicationServer getServerByProject(CmsUUID projectId) {
      Iterator iter = this.getReplicationServersAsList().iterator();

      CmsReplicationServer server;
      do {
         if (!iter.hasNext()) {
            return null;
         }

         server = (CmsReplicationServer)iter.next();
      } while(!server.getReplicationProject().getUuid().equals(projectId));

      return server;
   }

   public CmsReplicationUserSettings getUserReplication(String name) {
      return (CmsReplicationUserSettings)this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.get(name);
   }

   public List getUserReplications() {
      return Collections.unmodifiableList(new ArrayList(this.ôO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000newsuper.values()));
   }

   public I_CmsReplicationUserSynchronization getUserSynchronizationHandler() {
      return this.õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper;
   }

   public String getXmlFileName() {
      return "ocee-replication.xml";
   }

   public void initConfiguration() {
      CmsClusterManager clusterMan = CmsClusterManager.getInstance();
      if (clusterMan != null) {
         String wpServer = clusterMan.getWpServer().getName();
         CmsCoreProvider coreProvider = CmsCoreProvider.getInstance();
         Set poolUrls = new HashSet();
         Iterator itPools = coreProvider.getAvailableDbPoolNames().iterator();

         while(itPools.hasNext()) {
            String poolName = itPools.next().toString();
            poolUrls.add(coreProvider.getPoolUrl(poolName));
         }

         this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper = new HashMap(this.ØÓ00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000superObject);
         Iterator it = this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.values().iterator();

         CmsReplicationServer server;
         while(it.hasNext()) {
            server = (CmsReplicationServer)it.next();
            if (CmsStringUtil.isEmptyOrWhitespaceOnly(server.getOrgServerName())) {
               server.setOrgServerName(wpServer);
            }

            if (CmsStringUtil.isEmptyOrWhitespaceOnly(server.getOrgServerPoolUrl())) {
               server.setOrgServerPoolUrl("opencms:default");
            }

            if (CmsStringUtil.isEmptyOrWhitespaceOnly(server.getDestServerName())) {
               server.setDestServerName(server.getName());
            }
         }

         it = this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.values().iterator();

         while(true) {
            while(true) {
               while(it.hasNext()) {
                  server = (CmsReplicationServer)it.next();
                  if (!server.getDestServerPoolUrl().equals(server.getOrgServerPoolUrl()) && !server.getDestServerName().equals(server.getOrgServerName())) {
                     if (server.getDestServerPoolUrl().equals("opencms:default")) {
                        it.remove();
                        if (CmsLog.INIT.isErrorEnabled()) {
                           CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_SERVER_POOLURL_INVALID_1", new Object[]{server.toString()}));
                        }
                     } else if (server.getDestServerName().equals(wpServer)) {
                        it.remove();
                        if (CmsLog.INIT.isErrorEnabled()) {
                           CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_LOOP_SERVER_INVALID_1", new Object[]{server.toString()}));
                        }
                     } else if (clusterMan.getServer(server.getOrgServerName()) != null && clusterMan.getServer(server.getDestServerName()) != null) {
                        if (poolUrls.contains(server.getOrgServerPoolUrl()) && poolUrls.contains(server.getDestServerPoolUrl())) {
                           boolean found = false;
                           Iterator itInner = this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.values().iterator();

                           CmsReplicationServer s;
                           while(itInner.hasNext()) {
                              s = (CmsReplicationServer)itInner.next();
                              if (!server.getServerId().equals(s.getServerId()) && (server.getDestServerPoolUrl().equals(s.getDestServerPoolUrl()) || server.getDestServerName().equals(s.getDestServerName()))) {
                                 found = true;
                                 break;
                              }
                           }

                           if (found) {
                              it.remove();
                              if (CmsLog.INIT.isErrorEnabled()) {
                                 CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_LOOP_SERVER_INVALID_1", new Object[]{server.toString()}));
                              }
                           }

                           if (!server.getOrgServerName().equals(wpServer)) {
                              found = false;
                              itInner = this.Øo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dosuper.values().iterator();

                              while(itInner.hasNext()) {
                                 s = (CmsReplicationServer)itInner.next();
                                 if (s.getDestServerPoolUrl().equals(server.getOrgServerPoolUrl())) {
                                    found = true;
                                    break;
                                 }
                              }

                              if (!found) {
                                 it.remove();
                                 if (CmsLog.INIT.isErrorEnabled()) {
                                    CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_CHAIN_INVALID_1", new Object[]{server.toString()}));
                                 }
                              }
                           }
                        } else {
                           it.remove();
                           if (CmsLog.INIT.isErrorEnabled()) {
                              CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_SERVER_POOLURL_INVALID_1", new Object[]{server.toString()}));
                           }
                        }
                     } else {
                        it.remove();
                        if (CmsLog.INIT.isErrorEnabled()) {
                           CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_CLUSTER_SERVER_INVALID_1", new Object[]{server.toString()}));
                        }
                     }
                  } else {
                     it.remove();
                     if (CmsLog.INIT.isErrorEnabled()) {
                        CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_LOOP_SERVER_INVALID_1", new Object[]{server.toString()}));
                     }
                  }
               }

               CmsReplicationManager manager = CmsReplicationManager.getInstance();
               if (manager == null) {
                  return;
               }

               manager.initConfiguration(this);
               if (this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface == null) {
                  this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface = new ArrayList();
               }

               if (!this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface.contains("/")) {
                  this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface.add("/");
               }

               if (CmsLog.INIT.isInfoEnabled()) {
                  CmsLog.INIT.info(Messages.get().getBundle().key("INIT_MANAGER_CONFIGURED_0"));
               }

               return;
            }
         }
      }
   }

   public void setDriverManager(CmsDriverManager driverManager) {
      Iterator serverIter = this.getReplicationServersAsList().iterator();

      while(serverIter.hasNext()) {
         CmsReplicationServer server = (CmsReplicationServer)serverIter.next();
         server.setDriverManager(driverManager);
      }

   }

   public void setExportFolder(String exportFolder) {
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = exportFolder;
   }

   public void setManagersGroup(String managersGroup) {
      this.ÒO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000while = managersGroup;
   }

   public void setReplicationOrder(List replicationOrder) {
      this.õo00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000publicsuper = new ArrayList(replicationOrder);

      for(int i = 0; i < replicationOrder.size(); ++i) {
         String res1 = (String)replicationOrder.get(i);
         Iterator it = replicationOrder.subList(i + 1, replicationOrder.size()).iterator();

         while(it.hasNext()) {
            String res2 = (String)it.next();
            if (res2.startsWith(res1)) {
               if (CmsLog.INIT.isInfoEnabled()) {
                  CmsLog.INIT.info(Messages.get().getBundle().key("INIT_REPLICATION_ORDER_REMOVED_1", res2));
               }

               it.remove();
            }
         }
      }

      this.ÕO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000interface = replicationOrder;
   }

   public void setUserSynchronizationClass(String className) {
      try {
         this.õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper = (I_CmsReplicationUserSynchronization)Class.forName(className).newInstance();
         if (CmsLog.INIT.isInfoEnabled()) {
            CmsLog.INIT.info(Messages.get().getBundle().key("INIT_REPLICATION_USER_SYNCH_CLASS_SET_1", new Object[]{className}));
         }
      } catch (Exception var3) {
         if (CmsLog.INIT.isErrorEnabled()) {
            CmsLog.INIT.error(Messages.get().getBundle().key("INIT_REPLICATION_USER_SYNCH_CLASS_ERROR_1", new Object[]{className}));
         }

         this.õO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Objectsuper = new CmsReplicationUserDefaultSynchronization();
      }

   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(Digester digester, String path, String method) {
      digester.addCallMethod(path, method, 2);
      digester.addCallParam(path, 0, "class");
      digester.addCallParam(path, 1, "sqlmanager");
   }

   private Element o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super(Element parent, String name, Object driver, CmsSqlManager sqlManager) {
      Element driverElement = parent.addElement(name);
      driverElement.addAttribute("class", driver.getClass().getName());
      driverElement.addAttribute("sqlmanager", sqlManager.getClass().getName());
      return driverElement;
   }

   protected void initMembers() {
      CmsOceeManager.getInstance().checkOceeVersion();
   }

}
