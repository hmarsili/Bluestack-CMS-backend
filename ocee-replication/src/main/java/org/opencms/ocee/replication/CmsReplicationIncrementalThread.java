package org.opencms.ocee.replication;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.opencms.db.CmsDbContext;
import org.opencms.db.CmsPublishedResource;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsProject;
import org.opencms.main.OpenCms;
import org.opencms.report.A_CmsReportThread;
import org.opencms.util.CmsStringUtil;
import org.opencms.util.CmsUUID;

public class CmsReplicationIncrementalThread extends A_CmsReportThread {
   private Throwable Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   private String Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new;
   private String o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super;

   public CmsReplicationIncrementalThread(CmsObject cms, String resourceIds, String serverIds) {
      super(cms, Messages.get().getBundle(cms.getRequestContext().getLocale()).key("RPT_INCREMENTAL_THREAD_NAME_0"));
      this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = resourceIds;
      if (CmsStringUtil.isEmptyOrWhitespaceOnly(serverIds)) {
         Iterator iter = CmsReplicationManager.getInstance().getConfiguration().getReplicationServersAsList().iterator();

         while(iter.hasNext()) {
            CmsReplicationServer server = (CmsReplicationServer)iter.next();
            if (server.getMode() == CmsReplicationMode.MANUAL) {
               this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = server.getServerId().toString();
               break;
            }
         }
      } else {
         this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = serverIds;
      }

      this.initHtmlReport(cms.getRequestContext().getLocale());
   }

   public Throwable getError() {
      return this.Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object;
   }

   public String getReportUpdate() {
      return this.getReport().getReportUpdate();
   }

   public void run() {
      try {
         this.getReport().println(Messages.get().container("RPT_REPLICATION_INCREMENTAL_BEGIN_0"), 2);
         if (CmsReplicationManager.getInstance().getConfiguration().getReplicationServersAsList().size() == 0) {
            this.getReport().println(Messages.get().container("RPT_NO_SERVERS_CONFIGURED_0"), 1);
         } else {
            CmsDbContext dbc = new CmsDbContext(this.getCms().getRequestContext());
            List res = null;
            if (this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new != null) {
               res = new ArrayList();
               Iterator it = CmsReplicationManager.getInstance().getReplicationResourcesFromPublishHistory(dbc, new CmsUUID(this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super)).iterator();

               while(it.hasNext()) {
                  CmsPublishedResource pubRes = (CmsPublishedResource)it.next();
                  if (this.Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new.indexOf(pubRes.getResourceId().toString()) >= 0 && !res.contains(pubRes.getRootPath())) {
                     res.add(pubRes.getRootPath());
                  }
               }
            }

            CmsProject onlineProject = this.getCms().readProject("Online");
            CmsObject cms = OpenCms.initCmsObject(this.getCms());
            cms.getRequestContext().setCurrentProject(onlineProject);
            CmsReplicationManager.getInstance().handleIncrementalReplication(dbc, cms, this.getReport(), (List)null, CmsStringUtil.splitAsList(this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super, ',', true), res);
         }

         this.getReport().println(Messages.get().container("RPT_REPLICATION_INCREMENTAL_END_0"), 2);
         this.getReport().println(Messages.get().container("RPT_ADVICE_CLOCKS_SYNCHRONIZED_0"), 2);
      } catch (Throwable var5) {
         this.getReport().println(var5);
      }

   }
}
