package org.opencms.ocee.base;

import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.logging.Log;
import org.opencms.main.CmsIllegalStateException;
import org.opencms.main.CmsLog;
import org.opencms.main.OpenCms;
import org.opencms.util.CmsUUID;

public final class CmsOceeManager {
   public static final CmsUUID LDAP_GROUP_ID = new CmsUUID("dc0c8f0b-71e3-39a1-9a6c-8a17cff14e23");
   private static CmsOceeManager Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   private static final String Ô000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000String = "Iqpnwhgjnpnm1ZFNN1hqgjauuajhzq000";
   private static final String Ó000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Object = "2.1 development";
   private static final Log o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super = CmsLog.getLog(CmsOceeManager.class);
   private static String Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new = "7.5.4";
   private static CmsReloadingClassLoader Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void;
   private String Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;

   private CmsOceeManager() {
      this.o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super();
   }

   public static CmsOceeManager getInstance() {
      if (Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class == null) {
         Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class = new CmsOceeManager();
      }

      return Õ000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000class;
   }

   /** @deprecated */
   public boolean checkCoreVersion(String minVersion) {
      String version = OpenCms.getSystemInfo().getVersionName();
      if (version.compareToIgnoreCase(minVersion) < 0) {
         if (o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.isDebugEnabled()) {
            o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super.debug(Messages.get().getBundle().key("ERR_INCOMPATIBLE_VERSION_2", version, minVersion), new Exception());
         }

         return false;
      } else {
         return true;
      }
   }

   public void checkOceeVersion() {
      if (!checkOceeVersion(OpenCms.getSystemInfo().getVersionNumber())) {
         throw new CmsIllegalStateException(Messages.get().container("ERR_INCOMPATIBLE_CORE_VERSION_2", OpenCms.getSystemInfo().getVersionNumber(), this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return));
      }
   }

   public static boolean checkOceeVersion(String versionNumber) {
      Pattern p = Pattern.compile("^[0-9]+.[0-9]+.[0-9]+");
      Matcher m = p.matcher(versionNumber);
      if (m.find()) {
         versionNumber = versionNumber.substring(m.start(), m.end());
         if (versionNumber.compareToIgnoreCase(Ò000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000new) > 0) {
            return false;
         }
      }

      return true;
   }

   public CmsReloadingClassLoader getClassLoader() {
      if (Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void == null) {
         Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void = new CmsReloadingClassLoader();
      }

      return Ø000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000void;
   }

   public String getDefaultHelpText() {
      return this.decode("Iqpnwhgjnpnm1ZFNN1hqgjauuajhzq000");
   }

   public String getVersionNumber() {
      return this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return;
   }

   protected String decode(String t) {
      StringBuffer o = new StringBuffer(t.length());
      String b = "ZHAYFCSIUTPJDEXRNWKQLVGBMO";

      for(int i = 0; i < t.length(); ++i) {
         char c = t.charAt(i);
         int pos = t.toUpperCase().charAt(i) - 65;
         if (pos > 0 && pos < b.length()) {
            if (Character.isUpperCase(c)) {
               c = b.charAt(pos);
            } else {
               c = b.toLowerCase().charAt(pos);
            }
         } else if (c == '1') {
            c = ' ';
         } else if (c == '0') {
            c = '!';
         }

         o.append(c);
      }

      return o.toString();
   }

   protected String encode(String t) {
      StringBuffer o = new StringBuffer(t.length());
      String b = "CXFMNEWBHLSUYQZKTPGJIVRODA";

      for(int i = 0; i < t.length(); ++i) {
         char c = t.charAt(i);
         int pos = t.toUpperCase().charAt(i) - 65;
         if (pos > 0 && pos < b.length()) {
            if (Character.isUpperCase(c)) {
               c = b.charAt(pos);
            } else {
               c = b.toLowerCase().charAt(pos);
            }
         } else if (c == ' ') {
            c = '1';
         } else if (c == '!') {
            c = '0';
         }

         o.append(c);
      }

      return o.toString();
   }

   private void o000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000super() {
      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = "2.1 development";
      Properties props = new Properties();

      try {
         props.load(this.getClass().getClassLoader().getResourceAsStream("org/opencms/ocee/base/ocee-version.properties"));
      } catch (Throwable var3) {
         return;
      }

      this.Ö000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000return = props.getProperty("version.number", "2.1 development");
   }
}
